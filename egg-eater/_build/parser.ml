type token =
  | NUM of (int)
  | ID of (string)
  | TYID of (string)
  | DEF
  | ANDDEF
  | ADD1
  | SUB1
  | LPARENSPACE
  | LPARENNOSPACE
  | RPAREN
  | LBRACK
  | RBRACK
  | LBRACE
  | RBRACE
  | LET
  | IN
  | OF
  | EQUAL
  | COMMA
  | PLUS
  | MINUS
  | TIMES
  | IF
  | COLON
  | ELSECOLON
  | EOF
  | PRINT
  | PRINTSTACK
  | TRUE
  | FALSE
  | ISBOOL
  | ISNUM
  | ISTUPLE
  | EQEQ
  | LESSSPACE
  | LESSNOSPACE
  | GREATER
  | LESSEQ
  | GREATEREQ
  | AND
  | OR
  | NOT
  | THINARROW
  | COLONEQ
  | SEMI
  | NIL
  | TYPE

open Parsing;;
let _ = parse_error;;
# 2 "parser.mly"
open Exprs

let make_namebind(name, typ, loc) =
  if name = "_" then BBlank(typ, loc) else BName(name, typ, loc)
# 58 "parser.ml"
let yytransl_const = [|
  260 (* DEF *);
  261 (* ANDDEF *);
  262 (* ADD1 *);
  263 (* SUB1 *);
  264 (* LPARENSPACE *);
  265 (* LPARENNOSPACE *);
  266 (* RPAREN *);
  267 (* LBRACK *);
  268 (* RBRACK *);
  269 (* LBRACE *);
  270 (* RBRACE *);
  271 (* LET *);
  272 (* IN *);
  273 (* OF *);
  274 (* EQUAL *);
  275 (* COMMA *);
  276 (* PLUS *);
  277 (* MINUS *);
  278 (* TIMES *);
  279 (* IF *);
  280 (* COLON *);
  281 (* ELSECOLON *);
    0 (* EOF *);
  282 (* PRINT *);
  283 (* PRINTSTACK *);
  284 (* TRUE *);
  285 (* FALSE *);
  286 (* ISBOOL *);
  287 (* ISNUM *);
  288 (* ISTUPLE *);
  289 (* EQEQ *);
  290 (* LESSSPACE *);
  291 (* LESSNOSPACE *);
  292 (* GREATER *);
  293 (* LESSEQ *);
  294 (* GREATEREQ *);
  295 (* AND *);
  296 (* OR *);
  297 (* NOT *);
  298 (* THINARROW *);
  299 (* COLONEQ *);
  300 (* SEMI *);
  301 (* NIL *);
  302 (* TYPE *);
    0|]

let yytransl_block = [|
  257 (* NUM *);
  258 (* ID *);
  259 (* TYID *);
    0|]

let yylhs = "\255\255\
\002\000\002\000\002\000\002\000\004\000\004\000\004\000\004\000\
\004\000\004\000\004\000\005\000\005\000\007\000\007\000\007\000\
\007\000\009\000\009\000\010\000\010\000\010\000\010\000\010\000\
\010\000\011\000\011\000\013\000\013\000\013\000\014\000\014\000\
\014\000\014\000\014\000\014\000\014\000\014\000\014\000\014\000\
\012\000\012\000\012\000\008\000\008\000\008\000\008\000\008\000\
\008\000\008\000\008\000\008\000\008\000\008\000\008\000\015\000\
\015\000\015\000\015\000\015\000\016\000\016\000\016\000\018\000\
\017\000\017\000\006\000\006\000\006\000\019\000\019\000\003\000\
\003\000\003\000\003\000\020\000\020\000\021\000\021\000\022\000\
\022\000\023\000\023\000\024\000\024\000\025\000\025\000\026\000\
\026\000\027\000\027\000\001\000\001\000\000\000"

let yylen = "\002\000\
\001\000\001\000\001\000\003\000\001\000\001\000\001\000\001\000\
\001\000\001\000\001\000\003\000\005\000\004\000\006\000\003\000\
\001\000\001\000\003\000\002\000\002\000\004\000\004\000\005\000\
\005\000\006\000\006\000\008\000\008\000\008\000\004\000\001\000\
\001\000\001\000\004\000\003\000\003\000\003\000\001\000\001\000\
\001\000\005\000\005\000\003\000\003\000\003\000\003\000\003\000\
\003\000\003\000\003\000\003\000\003\000\003\000\001\000\006\000\
\008\000\012\000\007\000\009\000\000\000\001\000\003\000\001\000\
\001\000\003\000\001\000\003\000\003\000\001\000\003\000\001\000\
\001\000\001\000\001\000\005\000\005\000\003\000\003\000\001\000\
\003\000\001\000\003\000\001\000\003\000\000\000\002\000\006\000\
\006\000\000\000\002\000\006\000\004\000\002\000"

let yydefred = "\000\000\
\000\000\000\000\000\000\094\000\000\000\000\000\000\000\091\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\087\000\
\001\000\000\000\005\000\006\000\000\000\000\000\000\000\000\000\
\011\000\002\000\003\000\008\000\009\000\010\000\007\000\000\000\
\039\000\000\000\000\000\000\000\032\000\000\000\000\000\000\000\
\055\000\000\000\000\000\000\000\000\000\085\000\000\000\000\000\
\021\000\000\000\000\000\020\000\000\000\000\000\000\000\000\000\
\000\000\000\000\067\000\000\000\000\000\000\000\000\000\093\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\072\000\
\064\000\000\000\000\000\000\000\073\000\074\000\075\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\036\000\000\000\
\000\000\000\000\037\000\000\000\000\000\038\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\004\000\000\000\000\000\
\044\000\045\000\046\000\054\000\051\000\052\000\049\000\053\000\
\050\000\047\000\048\000\016\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\089\000\088\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\035\000\000\000\
\023\000\000\000\000\000\022\000\000\000\071\000\069\000\068\000\
\014\000\000\000\000\000\031\000\092\000\000\000\000\000\000\000\
\000\000\000\000\079\000\000\000\078\000\083\000\056\000\000\000\
\066\000\000\000\000\000\063\000\000\000\019\000\043\000\025\000\
\042\000\024\000\000\000\000\000\000\000\000\000\000\000\000\000\
\081\000\000\000\000\000\000\000\059\000\000\000\000\000\013\000\
\015\000\027\000\000\000\026\000\000\000\000\000\077\000\076\000\
\057\000\000\000\000\000\000\000\000\000\000\000\060\000\000\000\
\029\000\028\000\030\000\000\000\000\000\058\000"

let yydgoto = "\002\000\
\004\000\033\000\084\000\034\000\057\000\091\000\096\000\036\000\
\097\000\037\000\038\000\039\000\040\000\041\000\010\000\094\000\
\092\000\085\000\059\000\086\000\087\000\129\000\088\000\011\000\
\012\000\005\000\006\000"

let yysindex = "\016\000\
\232\254\000\000\023\255\000\000\232\254\027\255\015\255\000\000\
\039\255\060\255\027\255\091\001\068\255\012\255\027\255\000\000\
\000\000\035\255\000\000\000\000\028\255\112\255\091\255\091\001\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\044\255\
\000\000\069\255\003\000\050\255\000\000\096\255\098\255\105\255\
\000\000\123\255\123\255\102\255\099\255\000\000\164\255\030\255\
\000\000\009\255\058\255\000\000\082\255\093\255\091\255\091\255\
\107\255\110\255\000\000\106\255\123\255\091\001\123\255\000\000\
\173\001\173\001\173\001\173\001\173\001\173\001\173\001\173\001\
\173\001\173\001\173\001\091\001\128\255\133\255\136\255\000\000\
\000\000\123\255\123\255\116\255\000\000\000\000\000\000\135\255\
\137\255\238\254\127\255\138\255\130\255\114\255\000\000\132\255\
\144\255\123\255\000\000\205\255\123\255\000\000\222\000\123\255\
\145\255\146\255\091\001\091\001\091\001\000\000\149\255\161\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\147\255\150\255\152\255\248\254\
\120\255\153\255\140\255\165\255\123\255\000\000\000\000\091\001\
\123\255\091\255\037\255\099\255\168\255\091\001\000\000\170\255\
\000\000\174\255\178\255\000\000\179\255\000\000\000\000\000\000\
\000\000\159\255\172\255\000\000\000\000\197\255\198\255\199\255\
\123\255\123\255\000\000\123\255\000\000\000\000\000\000\180\255\
\000\000\091\001\123\255\000\000\091\255\000\000\000\000\000\000\
\000\000\000\000\091\255\091\001\006\255\020\255\160\255\183\255\
\000\000\206\255\207\255\091\001\000\000\184\255\208\255\000\000\
\000\000\000\000\091\001\000\000\091\001\091\001\000\000\000\000\
\000\000\091\001\177\255\209\255\210\255\211\255\000\000\123\255\
\000\000\000\000\000\000\186\255\091\001\000\000"

let yyrindex = "\000\000\
\008\001\000\000\000\000\000\000\008\001\132\001\000\000\000\000\
\000\000\050\001\132\001\000\000\000\000\000\000\000\000\000\000\
\000\000\001\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\181\000\000\000\046\000\091\000\136\000\
\000\000\000\000\000\000\000\000\188\255\000\000\000\000\187\001\
\000\000\000\000\187\001\000\000\000\000\056\255\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\215\255\000\000\000\000\000\000\000\000\
\000\000\000\000\217\255\000\000\190\255\000\000\000\000\219\255\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\254\254\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\188\255\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\214\255\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\189\255\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000"

let yygindex = "\000\000\
\000\000\000\000\200\255\000\000\059\000\237\255\244\255\118\002\
\176\255\000\000\000\000\000\000\000\000\000\000\000\000\099\000\
\216\255\000\000\000\000\000\000\000\000\175\255\226\255\225\000\
\230\000\000\000\237\000"

let yytablesize = 743
let yytable = "\035\000\
\041\000\131\000\064\000\058\000\110\000\136\000\112\000\082\000\
\050\000\053\000\161\000\060\000\089\000\133\000\105\000\106\000\
\001\000\194\000\099\000\146\000\044\000\003\000\149\000\137\000\
\007\000\128\000\128\000\100\000\017\000\048\000\009\000\196\000\
\013\000\019\000\020\000\021\000\022\000\049\000\047\000\080\000\
\014\000\144\000\023\000\047\000\147\000\033\000\045\000\150\000\
\195\000\111\000\024\000\130\000\132\000\098\000\025\000\026\000\
\027\000\028\000\029\000\030\000\170\000\174\000\197\000\124\000\
\015\000\070\000\047\000\061\000\031\000\065\000\066\000\067\000\
\032\000\070\000\070\000\042\000\043\000\062\000\171\000\185\000\
\168\000\101\000\068\000\069\000\070\000\071\000\072\000\073\000\
\074\000\075\000\040\000\102\000\054\000\076\000\153\000\154\000\
\155\000\169\000\055\000\056\000\103\000\093\000\166\000\054\000\
\184\000\186\000\077\000\187\000\078\000\055\000\056\000\090\000\
\017\000\051\000\190\000\079\000\104\000\019\000\020\000\021\000\
\022\000\052\000\107\000\167\000\080\000\081\000\023\000\108\000\
\125\000\109\000\082\000\083\000\191\000\126\000\024\000\034\000\
\127\000\133\000\025\000\026\000\027\000\028\000\029\000\030\000\
\134\000\138\000\135\000\139\000\140\000\141\000\142\000\212\000\
\031\000\143\000\151\000\152\000\032\000\189\000\156\000\058\000\
\157\000\162\000\163\000\158\000\017\000\018\000\159\000\193\000\
\160\000\019\000\020\000\021\000\022\000\095\000\165\000\201\000\
\173\000\179\000\023\000\175\000\017\000\164\000\204\000\176\000\
\205\000\206\000\024\000\177\000\178\000\207\000\025\000\026\000\
\027\000\028\000\029\000\030\000\180\000\181\000\182\000\183\000\
\214\000\161\000\198\000\188\000\031\000\017\000\018\000\202\000\
\032\000\213\000\019\000\020\000\021\000\022\000\145\000\199\000\
\200\000\203\000\208\000\023\000\209\000\210\000\211\000\061\000\
\082\000\062\000\065\000\024\000\018\000\012\000\080\000\025\000\
\026\000\027\000\028\000\029\000\030\000\192\000\172\000\046\000\
\016\000\008\000\000\000\000\000\000\000\031\000\000\000\000\000\
\000\000\032\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\041\000\041\000\000\000\041\000\041\000\041\000\041\000\
\041\000\000\000\041\000\041\000\041\000\000\000\000\000\041\000\
\041\000\000\000\000\000\041\000\041\000\041\000\041\000\041\000\
\041\000\041\000\063\000\041\000\041\000\041\000\041\000\041\000\
\041\000\041\000\041\000\041\000\041\000\041\000\041\000\041\000\
\041\000\041\000\000\000\000\000\041\000\041\000\033\000\033\000\
\000\000\033\000\033\000\033\000\033\000\033\000\033\000\033\000\
\000\000\033\000\000\000\000\000\033\000\033\000\000\000\000\000\
\033\000\033\000\033\000\033\000\033\000\033\000\033\000\000\000\
\033\000\033\000\033\000\033\000\033\000\033\000\033\000\033\000\
\033\000\033\000\033\000\033\000\033\000\033\000\033\000\000\000\
\000\000\033\000\033\000\040\000\040\000\000\000\040\000\040\000\
\040\000\040\000\040\000\040\000\040\000\000\000\040\000\000\000\
\000\000\040\000\040\000\000\000\000\000\040\000\040\000\040\000\
\040\000\040\000\040\000\040\000\000\000\040\000\040\000\040\000\
\040\000\040\000\040\000\040\000\040\000\040\000\040\000\040\000\
\040\000\040\000\040\000\040\000\000\000\000\000\040\000\040\000\
\034\000\034\000\000\000\034\000\034\000\034\000\034\000\034\000\
\034\000\034\000\000\000\034\000\000\000\000\000\034\000\034\000\
\000\000\000\000\034\000\034\000\034\000\034\000\034\000\034\000\
\034\000\000\000\034\000\034\000\034\000\034\000\034\000\034\000\
\034\000\034\000\034\000\034\000\034\000\034\000\034\000\034\000\
\034\000\000\000\000\000\034\000\034\000\017\000\017\000\000\000\
\017\000\017\000\017\000\017\000\017\000\017\000\017\000\000\000\
\017\000\000\000\000\000\017\000\017\000\000\000\000\000\017\000\
\000\000\000\000\000\000\017\000\017\000\017\000\000\000\017\000\
\017\000\017\000\017\000\017\000\017\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\017\000\017\000\018\000\
\000\000\017\000\000\000\019\000\020\000\021\000\022\000\148\000\
\000\000\000\000\000\000\000\000\023\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\024\000\000\000\000\000\000\000\
\025\000\026\000\027\000\028\000\029\000\030\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\031\000\000\000\
\090\000\090\000\032\000\090\000\000\000\090\000\090\000\090\000\
\090\000\000\000\000\000\000\000\000\000\000\000\090\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\090\000\000\000\
\000\000\000\000\090\000\090\000\090\000\090\000\090\000\090\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\090\000\000\000\084\000\084\000\090\000\084\000\000\000\084\000\
\084\000\084\000\084\000\000\000\000\000\000\000\000\000\000\000\
\084\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\084\000\000\000\000\000\000\000\084\000\084\000\084\000\084\000\
\084\000\084\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\084\000\017\000\018\000\000\000\084\000\000\000\
\019\000\020\000\021\000\022\000\000\000\000\000\000\000\000\000\
\000\000\023\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\024\000\000\000\000\000\000\000\025\000\026\000\027\000\
\028\000\029\000\030\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\031\000\086\000\086\000\000\000\032\000\
\000\000\086\000\086\000\086\000\086\000\000\000\000\000\000\000\
\000\000\000\000\086\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\086\000\000\000\000\000\000\000\086\000\086\000\
\086\000\086\000\086\000\086\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\086\000\017\000\018\000\000\000\
\086\000\000\000\019\000\020\000\021\000\022\000\113\000\114\000\
\115\000\116\000\117\000\118\000\119\000\120\000\121\000\122\000\
\123\000\000\000\000\000\000\000\041\000\041\000\000\000\025\000\
\026\000\027\000\028\000\029\000\030\000\041\000\041\000\041\000\
\041\000\000\000\000\000\000\000\000\000\031\000\000\000\000\000\
\000\000\032\000\000\000\041\000\041\000\041\000\041\000\041\000\
\041\000\041\000\041\000\000\000\000\000\000\000\041\000"

let yycheck = "\012\000\
\000\000\083\000\000\000\023\000\061\000\024\001\063\000\010\001\
\021\000\022\000\019\001\024\000\043\000\022\001\055\000\056\000\
\001\000\012\001\010\001\100\000\009\001\046\001\103\000\042\001\
\002\001\082\000\083\000\019\001\001\001\002\001\004\001\012\001\
\018\001\006\001\007\001\008\001\009\001\010\001\009\001\042\001\
\002\001\098\000\015\001\009\001\101\000\000\000\035\001\104\000\
\043\001\062\000\023\001\082\000\083\000\024\001\027\001\028\001\
\029\001\030\001\031\001\032\001\024\001\142\000\043\001\076\000\
\005\001\010\001\009\001\024\001\041\001\020\001\021\001\022\001\
\045\001\018\001\019\001\008\001\009\001\009\001\042\001\161\000\
\137\000\024\001\033\001\034\001\035\001\036\001\037\001\038\001\
\039\001\040\001\000\000\010\001\002\001\044\001\107\000\108\000\
\109\000\138\000\008\001\009\001\019\001\003\001\133\000\002\001\
\161\000\162\000\011\001\164\000\011\001\008\001\009\001\010\001\
\001\001\002\001\171\000\011\001\024\001\006\001\007\001\008\001\
\009\001\010\001\016\001\136\000\002\001\003\001\015\001\018\001\
\001\001\024\001\008\001\009\001\173\000\001\001\023\001\000\000\
\001\001\022\001\027\001\028\001\029\001\030\001\031\001\032\001\
\010\001\019\001\010\001\010\001\019\001\036\001\019\001\208\000\
\041\001\010\001\010\001\010\001\045\001\170\000\010\001\179\000\
\000\000\042\001\010\001\017\001\001\001\002\001\017\001\180\000\
\017\001\006\001\007\001\008\001\009\001\010\001\010\001\188\000\
\009\001\019\001\015\001\010\001\000\000\042\001\195\000\010\001\
\197\000\198\000\023\001\010\001\010\001\202\000\027\001\028\001\
\029\001\030\001\031\001\032\001\025\001\001\001\001\001\001\001\
\213\000\019\001\043\001\024\001\041\001\001\001\002\001\024\001\
\045\001\024\001\006\001\007\001\008\001\009\001\010\001\010\001\
\010\001\010\001\042\001\015\001\012\001\012\001\012\001\036\001\
\010\001\036\001\010\001\023\001\010\001\016\001\042\001\027\001\
\028\001\029\001\030\001\031\001\032\001\179\000\140\000\015\000\
\011\000\005\000\255\255\255\255\255\255\041\001\255\255\255\255\
\255\255\045\001\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\001\001\002\001\255\255\004\001\005\001\006\001\007\001\
\008\001\255\255\010\001\011\001\012\001\255\255\255\255\015\001\
\016\001\255\255\255\255\019\001\020\001\021\001\022\001\023\001\
\024\001\025\001\024\001\027\001\028\001\029\001\030\001\031\001\
\032\001\033\001\034\001\035\001\036\001\037\001\038\001\039\001\
\040\001\041\001\255\255\255\255\044\001\045\001\001\001\002\001\
\255\255\004\001\005\001\006\001\007\001\008\001\009\001\010\001\
\255\255\012\001\255\255\255\255\015\001\016\001\255\255\255\255\
\019\001\020\001\021\001\022\001\023\001\024\001\025\001\255\255\
\027\001\028\001\029\001\030\001\031\001\032\001\033\001\034\001\
\035\001\036\001\037\001\038\001\039\001\040\001\041\001\255\255\
\255\255\044\001\045\001\001\001\002\001\255\255\004\001\005\001\
\006\001\007\001\008\001\009\001\010\001\255\255\012\001\255\255\
\255\255\015\001\016\001\255\255\255\255\019\001\020\001\021\001\
\022\001\023\001\024\001\025\001\255\255\027\001\028\001\029\001\
\030\001\031\001\032\001\033\001\034\001\035\001\036\001\037\001\
\038\001\039\001\040\001\041\001\255\255\255\255\044\001\045\001\
\001\001\002\001\255\255\004\001\005\001\006\001\007\001\008\001\
\009\001\010\001\255\255\012\001\255\255\255\255\015\001\016\001\
\255\255\255\255\019\001\020\001\021\001\022\001\023\001\024\001\
\025\001\255\255\027\001\028\001\029\001\030\001\031\001\032\001\
\033\001\034\001\035\001\036\001\037\001\038\001\039\001\040\001\
\041\001\255\255\255\255\044\001\045\001\001\001\002\001\255\255\
\004\001\005\001\006\001\007\001\008\001\009\001\010\001\255\255\
\012\001\255\255\255\255\015\001\016\001\255\255\255\255\019\001\
\255\255\255\255\255\255\023\001\024\001\025\001\255\255\027\001\
\028\001\029\001\030\001\031\001\032\001\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\041\001\001\001\002\001\
\255\255\045\001\255\255\006\001\007\001\008\001\009\001\010\001\
\255\255\255\255\255\255\255\255\015\001\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\023\001\255\255\255\255\255\255\
\027\001\028\001\029\001\030\001\031\001\032\001\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\041\001\255\255\
\001\001\002\001\045\001\004\001\255\255\006\001\007\001\008\001\
\009\001\255\255\255\255\255\255\255\255\255\255\015\001\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\023\001\255\255\
\255\255\255\255\027\001\028\001\029\001\030\001\031\001\032\001\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\041\001\255\255\001\001\002\001\045\001\004\001\255\255\006\001\
\007\001\008\001\009\001\255\255\255\255\255\255\255\255\255\255\
\015\001\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\023\001\255\255\255\255\255\255\027\001\028\001\029\001\030\001\
\031\001\032\001\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\041\001\001\001\002\001\255\255\045\001\255\255\
\006\001\007\001\008\001\009\001\255\255\255\255\255\255\255\255\
\255\255\015\001\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\023\001\255\255\255\255\255\255\027\001\028\001\029\001\
\030\001\031\001\032\001\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\041\001\001\001\002\001\255\255\045\001\
\255\255\006\001\007\001\008\001\009\001\255\255\255\255\255\255\
\255\255\255\255\015\001\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\023\001\255\255\255\255\255\255\027\001\028\001\
\029\001\030\001\031\001\032\001\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\041\001\001\001\002\001\255\255\
\045\001\255\255\006\001\007\001\008\001\009\001\065\000\066\000\
\067\000\068\000\069\000\070\000\071\000\072\000\073\000\074\000\
\075\000\255\255\255\255\255\255\010\001\011\001\255\255\027\001\
\028\001\029\001\030\001\031\001\032\001\019\001\020\001\021\001\
\022\001\255\255\255\255\255\255\255\255\041\001\255\255\255\255\
\255\255\045\001\255\255\033\001\034\001\035\001\036\001\037\001\
\038\001\039\001\040\001\255\255\255\255\255\255\044\001"

let yynames_const = "\
  DEF\000\
  ANDDEF\000\
  ADD1\000\
  SUB1\000\
  LPARENSPACE\000\
  LPARENNOSPACE\000\
  RPAREN\000\
  LBRACK\000\
  RBRACK\000\
  LBRACE\000\
  RBRACE\000\
  LET\000\
  IN\000\
  OF\000\
  EQUAL\000\
  COMMA\000\
  PLUS\000\
  MINUS\000\
  TIMES\000\
  IF\000\
  COLON\000\
  ELSECOLON\000\
  EOF\000\
  PRINT\000\
  PRINTSTACK\000\
  TRUE\000\
  FALSE\000\
  ISBOOL\000\
  ISNUM\000\
  ISTUPLE\000\
  EQEQ\000\
  LESSSPACE\000\
  LESSNOSPACE\000\
  GREATER\000\
  LESSEQ\000\
  GREATEREQ\000\
  AND\000\
  OR\000\
  NOT\000\
  THINARROW\000\
  COLONEQ\000\
  SEMI\000\
  NIL\000\
  TYPE\000\
  "

let yynames_block = "\
  NUM\000\
  ID\000\
  TYID\000\
  "

let yyact = [|
  (fun _ -> failwith "parser")
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : int) in
    Obj.repr(
# 25 "parser.mly"
        ( ENumber(_1, (Parsing.symbol_start_pos (), Parsing.symbol_end_pos ())) )
# 490 "parser.ml"
               : 'const))
; (fun __caml_parser_env ->
    Obj.repr(
# 26 "parser.mly"
         ( EBool(true, (Parsing.symbol_start_pos (), Parsing.symbol_end_pos ())) )
# 496 "parser.ml"
               : 'const))
; (fun __caml_parser_env ->
    Obj.repr(
# 27 "parser.mly"
          ( EBool(false, (Parsing.symbol_start_pos (), Parsing.symbol_end_pos ())) )
# 502 "parser.ml"
               : 'const))
; (fun __caml_parser_env ->
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'typ) in
    Obj.repr(
# 28 "parser.mly"
                  ( ENil(_3, (Parsing.symbol_start_pos (), Parsing.symbol_end_pos ())) )
# 509 "parser.ml"
               : 'const))
; (fun __caml_parser_env ->
    Obj.repr(
# 31 "parser.mly"
         ( Add1 )
# 515 "parser.ml"
               : 'prim1))
; (fun __caml_parser_env ->
    Obj.repr(
# 32 "parser.mly"
         ( Sub1 )
# 521 "parser.ml"
               : 'prim1))
; (fun __caml_parser_env ->
    Obj.repr(
# 33 "parser.mly"
        ( Not )
# 527 "parser.ml"
               : 'prim1))
; (fun __caml_parser_env ->
    Obj.repr(
# 34 "parser.mly"
           ( IsBool )
# 533 "parser.ml"
               : 'prim1))
; (fun __caml_parser_env ->
    Obj.repr(
# 35 "parser.mly"
          ( IsNum )
# 539 "parser.ml"
               : 'prim1))
; (fun __caml_parser_env ->
    Obj.repr(
# 36 "parser.mly"
            ( IsTuple )
# 545 "parser.ml"
               : 'prim1))
; (fun __caml_parser_env ->
    Obj.repr(
# 37 "parser.mly"
               ( PrintStack )
# 551 "parser.ml"
               : 'prim1))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'bind) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 40 "parser.mly"
                    ( [(_1, _3, (Parsing.rhs_start_pos 1, Parsing.rhs_end_pos 1))] )
# 559 "parser.ml"
               : 'bindings))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 4 : 'bind) in
    let _3 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _5 = (Parsing.peek_val __caml_parser_env 0 : 'bindings) in
    Obj.repr(
# 41 "parser.mly"
                                   ( (_1, _3, (Parsing.rhs_start_pos 1, Parsing.rhs_end_pos 1))::_5 )
# 568 "parser.ml"
               : 'bindings))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 2 : 'bindings) in
    let _4 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 44 "parser.mly"
                         ( ELet(_2, _4, (Parsing.symbol_start_pos (), Parsing.symbol_end_pos ())) )
# 576 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 4 : 'expr) in
    let _4 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _6 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 45 "parser.mly"
                                      ( EIf(_2, _4, _6, (Parsing.symbol_start_pos (), Parsing.symbol_end_pos ())) )
# 585 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'binop_expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 46 "parser.mly"
                         ( ESeq(_1, _3, (Parsing.symbol_start_pos (), Parsing.symbol_end_pos ())) )
# 593 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'binop_expr) in
    Obj.repr(
# 47 "parser.mly"
               ( _1 )
# 600 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 50 "parser.mly"
         ( [_1] )
# 607 "parser.ml"
               : 'exprs))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'exprs) in
    Obj.repr(
# 51 "parser.mly"
                     ( _1::_3 )
# 615 "parser.ml"
               : 'exprs))
; (fun __caml_parser_env ->
    Obj.repr(
# 54 "parser.mly"
                         ( ETuple([], (Parsing.symbol_start_pos (), Parsing.symbol_end_pos ())) )
# 621 "parser.ml"
               : 'tuple_expr))
; (fun __caml_parser_env ->
    Obj.repr(
# 55 "parser.mly"
                       ( ETuple([], (Parsing.symbol_start_pos (), Parsing.symbol_end_pos ())) )
# 627 "parser.ml"
               : 'tuple_expr))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    Obj.repr(
# 56 "parser.mly"
                                    ( ETuple([_2], (Parsing.symbol_start_pos (), Parsing.symbol_end_pos ())) )
# 634 "parser.ml"
               : 'tuple_expr))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    Obj.repr(
# 57 "parser.mly"
                                  ( ETuple([_2], (Parsing.symbol_start_pos (), Parsing.symbol_end_pos ())) )
# 641 "parser.ml"
               : 'tuple_expr))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 3 : 'expr) in
    let _4 = (Parsing.peek_val __caml_parser_env 1 : 'exprs) in
    Obj.repr(
# 58 "parser.mly"
                                          ( ETuple(_2::_4, (Parsing.symbol_start_pos (), Parsing.symbol_end_pos ())) )
# 649 "parser.ml"
               : 'tuple_expr))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 3 : 'expr) in
    let _4 = (Parsing.peek_val __caml_parser_env 1 : 'exprs) in
    Obj.repr(
# 59 "parser.mly"
                                        ( ETuple(_2::_4, (Parsing.symbol_start_pos (), Parsing.symbol_end_pos ())) )
# 657 "parser.ml"
               : 'tuple_expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 5 : 'id) in
    let _3 = (Parsing.peek_val __caml_parser_env 3 : int) in
    let _5 = (Parsing.peek_val __caml_parser_env 1 : int) in
    Obj.repr(
# 62 "parser.mly"
                                ( EGetItem(_1, _3, _5, (Parsing.symbol_start_pos (), Parsing.symbol_end_pos ())) )
# 666 "parser.ml"
               : 'tuple_get))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 5 : 'tuple_get) in
    let _3 = (Parsing.peek_val __caml_parser_env 3 : int) in
    let _5 = (Parsing.peek_val __caml_parser_env 1 : int) in
    Obj.repr(
# 63 "parser.mly"
                                       ( EGetItem(_1, _3, _5, (Parsing.symbol_start_pos (), Parsing.symbol_end_pos ())) )
# 675 "parser.ml"
               : 'tuple_get))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 7 : 'id) in
    let _3 = (Parsing.peek_val __caml_parser_env 5 : int) in
    let _5 = (Parsing.peek_val __caml_parser_env 3 : int) in
    let _7 = (Parsing.peek_val __caml_parser_env 1 : 'expr) in
    Obj.repr(
# 66 "parser.mly"
                                             ( ESetItem(_1, _3, _5, _7, (Parsing.symbol_start_pos (), Parsing.symbol_end_pos ())) )
# 685 "parser.ml"
               : 'tuple_set))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 7 : 'tuple_get) in
    let _3 = (Parsing.peek_val __caml_parser_env 5 : int) in
    let _5 = (Parsing.peek_val __caml_parser_env 3 : int) in
    let _7 = (Parsing.peek_val __caml_parser_env 1 : 'expr) in
    Obj.repr(
# 67 "parser.mly"
                                                    ( ESetItem(_1, _3, _5, _7, (Parsing.symbol_start_pos (), Parsing.symbol_end_pos ())) )
# 695 "parser.ml"
               : 'tuple_set))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 7 : 'tuple_set) in
    let _3 = (Parsing.peek_val __caml_parser_env 5 : int) in
    let _5 = (Parsing.peek_val __caml_parser_env 3 : int) in
    let _7 = (Parsing.peek_val __caml_parser_env 1 : 'expr) in
    Obj.repr(
# 68 "parser.mly"
                                                    ( ESetItem(_1, _3, _5, _7, (Parsing.symbol_start_pos (), Parsing.symbol_end_pos ())) )
# 705 "parser.ml"
               : 'tuple_set))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 3 : 'prim1) in
    let _3 = (Parsing.peek_val __caml_parser_env 1 : 'expr) in
    Obj.repr(
# 73 "parser.mly"
                                    ( EPrim1(_1, _3, (Parsing.symbol_start_pos (), Parsing.symbol_end_pos ())) )
# 713 "parser.ml"
               : 'simple_expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'tuple_expr) in
    Obj.repr(
# 75 "parser.mly"
               ( _1 )
# 720 "parser.ml"
               : 'simple_expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'tuple_get) in
    Obj.repr(
# 76 "parser.mly"
              ( _1 )
# 727 "parser.ml"
               : 'simple_expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'tuple_set) in
    Obj.repr(
# 77 "parser.mly"
              ( _1 )
# 734 "parser.ml"
               : 'simple_expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 3 : string) in
    let _3 = (Parsing.peek_val __caml_parser_env 1 : 'exprs) in
    Obj.repr(
# 79 "parser.mly"
                                  ( EApp(_1, _3, (Parsing.symbol_start_pos (), Parsing.symbol_end_pos ())) )
# 742 "parser.ml"
               : 'simple_expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : string) in
    Obj.repr(
# 80 "parser.mly"
                            ( EApp(_1, [], (Parsing.symbol_start_pos (), Parsing.symbol_end_pos ())) )
# 749 "parser.ml"
               : 'simple_expr))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 1 : 'expr) in
    Obj.repr(
# 82 "parser.mly"
                            ( _2 )
# 756 "parser.ml"
               : 'simple_expr))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 1 : 'expr) in
    Obj.repr(
# 83 "parser.mly"
                              ( _2 )
# 763 "parser.ml"
               : 'simple_expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'const) in
    Obj.repr(
# 85 "parser.mly"
          ( _1 )
# 770 "parser.ml"
               : 'simple_expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'id) in
    Obj.repr(
# 86 "parser.mly"
       ( _1 )
# 777 "parser.ml"
               : 'simple_expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : string) in
    Obj.repr(
# 89 "parser.mly"
                   ( EId(_1, (Parsing.symbol_start_pos (), Parsing.symbol_end_pos ())) )
# 784 "parser.ml"
               : 'id))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 3 : string) in
    let _4 = (Parsing.peek_val __caml_parser_env 1 : 'typ) in
    Obj.repr(
# 90 "parser.mly"
                                      ( EAnnot(EId(_2, (Parsing.rhs_start_pos 2, Parsing.rhs_end_pos 2)), _4,
                                               (Parsing.symbol_start_pos (), Parsing.symbol_end_pos ())) )
# 793 "parser.ml"
               : 'id))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 3 : string) in
    let _4 = (Parsing.peek_val __caml_parser_env 1 : 'typ) in
    Obj.repr(
# 92 "parser.mly"
                                    ( EAnnot(EId(_2, (Parsing.rhs_start_pos 2, Parsing.rhs_end_pos 2)), _4,
                                             (Parsing.symbol_start_pos (), Parsing.symbol_end_pos ())) )
# 802 "parser.ml"
               : 'id))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'binop_expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'binop_expr) in
    Obj.repr(
# 97 "parser.mly"
                               ( EPrim2(Plus, _1, _3, (Parsing.symbol_start_pos (), Parsing.symbol_end_pos ())) )
# 810 "parser.ml"
               : 'binop_expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'binop_expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'binop_expr) in
    Obj.repr(
# 98 "parser.mly"
                                ( EPrim2(Minus, _1, _3, (Parsing.symbol_start_pos (), Parsing.symbol_end_pos ())) )
# 818 "parser.ml"
               : 'binop_expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'binop_expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'binop_expr) in
    Obj.repr(
# 99 "parser.mly"
                                ( EPrim2(Times, _1, _3, (Parsing.symbol_start_pos (), Parsing.symbol_end_pos ())) )
# 826 "parser.ml"
               : 'binop_expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'binop_expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'binop_expr) in
    Obj.repr(
# 100 "parser.mly"
                              ( EPrim2(And, _1, _3, (Parsing.symbol_start_pos (), Parsing.symbol_end_pos ())) )
# 834 "parser.ml"
               : 'binop_expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'binop_expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'binop_expr) in
    Obj.repr(
# 101 "parser.mly"
                             ( EPrim2(Or, _1, _3, (Parsing.symbol_start_pos (), Parsing.symbol_end_pos ())) )
# 842 "parser.ml"
               : 'binop_expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'binop_expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'binop_expr) in
    Obj.repr(
# 102 "parser.mly"
                                  ( EPrim2(Greater, _1, _3, (Parsing.symbol_start_pos (), Parsing.symbol_end_pos ())) )
# 850 "parser.ml"
               : 'binop_expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'binop_expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'binop_expr) in
    Obj.repr(
# 103 "parser.mly"
                                    ( EPrim2(GreaterEq, _1, _3, (Parsing.symbol_start_pos (), Parsing.symbol_end_pos ())) )
# 858 "parser.ml"
               : 'binop_expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'binop_expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'binop_expr) in
    Obj.repr(
# 104 "parser.mly"
                                    ( EPrim2(Less, _1, _3, (Parsing.symbol_start_pos (), Parsing.symbol_end_pos ())) )
# 866 "parser.ml"
               : 'binop_expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'binop_expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'binop_expr) in
    Obj.repr(
# 105 "parser.mly"
                                      ( EPrim2(Less, _1, _3, (Parsing.symbol_start_pos (), Parsing.symbol_end_pos ())) )
# 874 "parser.ml"
               : 'binop_expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'binop_expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'binop_expr) in
    Obj.repr(
# 106 "parser.mly"
                                 ( EPrim2(LessEq, _1, _3, (Parsing.symbol_start_pos (), Parsing.symbol_end_pos ())) )
# 882 "parser.ml"
               : 'binop_expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'binop_expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'binop_expr) in
    Obj.repr(
# 107 "parser.mly"
                               ( EPrim2(Eq, _1, _3, (Parsing.symbol_start_pos (), Parsing.symbol_end_pos ())) )
# 890 "parser.ml"
               : 'binop_expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'simple_expr) in
    Obj.repr(
# 108 "parser.mly"
                ( _1 )
# 897 "parser.ml"
               : 'binop_expr))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 4 : string) in
    let _6 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 112 "parser.mly"
    ( let arg_pos = Parsing.rhs_start_pos 3, Parsing.rhs_end_pos 4 in
      DFun(_2, [], SForall([], TyArr([], TyBlank arg_pos, arg_pos), arg_pos), _6, (Parsing.symbol_start_pos (), Parsing.symbol_end_pos ())) )
# 906 "parser.ml"
               : 'decl))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 6 : string) in
    let _6 = (Parsing.peek_val __caml_parser_env 2 : 'typ) in
    let _8 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 115 "parser.mly"
    (
      let typ_pos = (Parsing.rhs_start_pos 6, Parsing.rhs_end_pos 6) in
      DFun(_2, [], SForall([], TyArr([], _6, typ_pos), typ_pos), _8, (Parsing.symbol_start_pos (), Parsing.symbol_end_pos ())) )
# 917 "parser.ml"
               : 'decl))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 10 : string) in
    let _4 = (Parsing.peek_val __caml_parser_env 8 : 'tyids) in
    let _7 = (Parsing.peek_val __caml_parser_env 5 : 'binds) in
    let _10 = (Parsing.peek_val __caml_parser_env 2 : 'typ) in
    let _12 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 119 "parser.mly"
    (
      let arg_types = List.map bind_to_typ _7 in
      let arrow_pos = (Parsing.rhs_start_pos 6, Parsing.rhs_end_pos 10) in
      let typ_pos = (Parsing.rhs_start_pos 3, Parsing.rhs_end_pos 10) in
      DFun(_2, _7, SForall(_4, TyArr(arg_types, _10, arrow_pos), typ_pos), _12, (Parsing.symbol_start_pos (), Parsing.symbol_end_pos ()))
    )
# 933 "parser.ml"
               : 'decl))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 5 : string) in
    let _4 = (Parsing.peek_val __caml_parser_env 3 : 'binds) in
    let _7 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 126 "parser.mly"
    (
      let arg_types = List.map bind_to_typ _4 in
      let typ_pos = (Parsing.rhs_start_pos 3, Parsing.rhs_end_pos 5) in
      let arr_typ = SForall([], TyArr(arg_types, TyBlank(typ_pos), typ_pos), typ_pos) in
      DFun(_2, _4, arr_typ, _7, (Parsing.symbol_start_pos (), Parsing.symbol_end_pos ()))
    )
# 947 "parser.ml"
               : 'decl))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 7 : string) in
    let _4 = (Parsing.peek_val __caml_parser_env 5 : 'binds) in
    let _7 = (Parsing.peek_val __caml_parser_env 2 : 'typ) in
    let _9 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 133 "parser.mly"
    (
      let arg_types = List.map bind_to_typ _4 in
      let typ_pos = (Parsing.rhs_start_pos 3, Parsing.rhs_end_pos 7) in
      DFun(_2, _4, SForall([], TyArr(arg_types, _7, typ_pos), typ_pos), _9, (Parsing.symbol_start_pos (), Parsing.symbol_end_pos ()))
    )
# 961 "parser.ml"
               : 'decl))
; (fun __caml_parser_env ->
    Obj.repr(
# 140 "parser.mly"
    ( [] )
# 967 "parser.ml"
               : 'tyids))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : string) in
    Obj.repr(
# 141 "parser.mly"
         ( [_1] )
# 974 "parser.ml"
               : 'tyids))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : string) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'tyids) in
    Obj.repr(
# 142 "parser.mly"
                     ( _1::_3 )
# 982 "parser.ml"
               : 'tyids))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : string) in
    Obj.repr(
# 144 "parser.mly"
            ( TyVar(_1, (Parsing.symbol_start_pos (), Parsing.symbol_end_pos ())) )
# 989 "parser.ml"
               : 'tyid))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'bind) in
    Obj.repr(
# 147 "parser.mly"
         ( [_1] )
# 996 "parser.ml"
               : 'binds))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'bind) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'binds) in
    Obj.repr(
# 148 "parser.mly"
                     ( _1::_3 )
# 1004 "parser.ml"
               : 'binds))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'namebind) in
    Obj.repr(
# 151 "parser.mly"
             ( _1 )
# 1011 "parser.ml"
               : 'bind))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 1 : 'binds) in
    Obj.repr(
# 152 "parser.mly"
                               ( BTuple(_2, (Parsing.symbol_start_pos (), Parsing.symbol_end_pos ())) )
# 1018 "parser.ml"
               : 'bind))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 1 : 'binds) in
    Obj.repr(
# 153 "parser.mly"
                             ( BTuple(_2, (Parsing.symbol_start_pos (), Parsing.symbol_end_pos ())) )
# 1025 "parser.ml"
               : 'bind))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : string) in
    Obj.repr(
# 156 "parser.mly"
                  ( make_namebind(_1, TyBlank(Parsing.symbol_start_pos (), Parsing.symbol_end_pos ()), (Parsing.symbol_start_pos (), Parsing.symbol_end_pos ())) )
# 1032 "parser.ml"
               : 'namebind))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : string) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'typ) in
    Obj.repr(
# 157 "parser.mly"
                 ( make_namebind(_1, _3, (Parsing.symbol_start_pos (), Parsing.symbol_end_pos ())) )
# 1040 "parser.ml"
               : 'namebind))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : string) in
    Obj.repr(
# 160 "parser.mly"
       ( TyCon(_1, (Parsing.symbol_start_pos (), Parsing.symbol_end_pos ())) )
# 1047 "parser.ml"
               : 'typ))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'tyid) in
    Obj.repr(
# 161 "parser.mly"
         ( _1 )
# 1054 "parser.ml"
               : 'typ))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'arrowtyp) in
    Obj.repr(
# 162 "parser.mly"
             ( _1 )
# 1061 "parser.ml"
               : 'typ))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'tupletyp) in
    Obj.repr(
# 163 "parser.mly"
             ( _1 )
# 1068 "parser.ml"
               : 'typ))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 3 : 'typs) in
    let _4 = (Parsing.peek_val __caml_parser_env 1 : 'typ) in
    Obj.repr(
# 166 "parser.mly"
                                            ( TyArr(_2, _4, (Parsing.symbol_start_pos (), Parsing.symbol_end_pos ())) )
# 1076 "parser.ml"
               : 'arrowtyp))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 3 : 'typs) in
    let _4 = (Parsing.peek_val __caml_parser_env 1 : 'typ) in
    Obj.repr(
# 167 "parser.mly"
                                          ( TyArr(_2, _4, (Parsing.symbol_start_pos (), Parsing.symbol_end_pos ())) )
# 1084 "parser.ml"
               : 'arrowtyp))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 1 : 'startyps) in
    Obj.repr(
# 170 "parser.mly"
                                  ( TyTup(_2, (Parsing.symbol_start_pos (), Parsing.symbol_end_pos ())) )
# 1091 "parser.ml"
               : 'tupletyp))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 1 : 'startyps) in
    Obj.repr(
# 171 "parser.mly"
                                ( TyTup(_2, (Parsing.symbol_start_pos (), Parsing.symbol_end_pos ())) )
# 1098 "parser.ml"
               : 'tupletyp))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'typ) in
    Obj.repr(
# 175 "parser.mly"
        ( [_1] )
# 1105 "parser.ml"
               : 'typs))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'typ) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'typs) in
    Obj.repr(
# 176 "parser.mly"
                   ( _1::_3 )
# 1113 "parser.ml"
               : 'typs))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'typ) in
    Obj.repr(
# 179 "parser.mly"
        ( [_1] )
# 1120 "parser.ml"
               : 'startyps))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'typ) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'startyps) in
    Obj.repr(
# 180 "parser.mly"
                       ( _1::_3 )
# 1128 "parser.ml"
               : 'startyps))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'decl) in
    Obj.repr(
# 183 "parser.mly"
         ( [_1] )
# 1135 "parser.ml"
               : 'declgroup))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'decl) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'declgroup) in
    Obj.repr(
# 184 "parser.mly"
                          ( _1::_3 )
# 1143 "parser.ml"
               : 'declgroup))
; (fun __caml_parser_env ->
    Obj.repr(
# 187 "parser.mly"
    ( [] )
# 1149 "parser.ml"
               : 'decls))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'declgroup) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'decls) in
    Obj.repr(
# 188 "parser.mly"
                    ( _1::_2 )
# 1157 "parser.ml"
               : 'decls))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 4 : string) in
    let _5 = (Parsing.peek_val __caml_parser_env 1 : 'startyps) in
    Obj.repr(
# 191 "parser.mly"
                                                ( TyDecl(_2, _5, (Parsing.symbol_start_pos (), Parsing.symbol_end_pos())) )
# 1165 "parser.ml"
               : 'tydecl))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 4 : string) in
    let _5 = (Parsing.peek_val __caml_parser_env 1 : 'startyps) in
    Obj.repr(
# 192 "parser.mly"
                                              ( TyDecl(_2, _5, (Parsing.symbol_start_pos (), Parsing.symbol_end_pos())) )
# 1173 "parser.ml"
               : 'tydecl))
; (fun __caml_parser_env ->
    Obj.repr(
# 195 "parser.mly"
    ( [] )
# 1179 "parser.ml"
               : 'tydecls))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'tydecl) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'tydecls) in
    Obj.repr(
# 196 "parser.mly"
                   ( _1 :: _2 )
# 1187 "parser.ml"
               : 'tydecls))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 5 : 'tydecls) in
    let _2 = (Parsing.peek_val __caml_parser_env 4 : 'decls) in
    let _3 = (Parsing.peek_val __caml_parser_env 3 : 'expr) in
    let _5 = (Parsing.peek_val __caml_parser_env 1 : 'typ) in
    Obj.repr(
# 199 "parser.mly"
                                     ( Program(_1, _2, EAnnot(_3, _5, (Parsing.rhs_start_pos 3, Parsing.rhs_end_pos 5)), (Parsing.symbol_start_pos (), Parsing.symbol_end_pos ())) )
# 1197 "parser.ml"
               : (Lexing.position * Lexing.position) Exprs.program))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 3 : 'tydecls) in
    let _2 = (Parsing.peek_val __caml_parser_env 2 : 'decls) in
    let _3 = (Parsing.peek_val __caml_parser_env 1 : 'expr) in
    Obj.repr(
# 200 "parser.mly"
                           ( Program(_1, _2, _3, (Parsing.symbol_start_pos (), Parsing.symbol_end_pos ())) )
# 1206 "parser.ml"
               : (Lexing.position * Lexing.position) Exprs.program))
(* Entry program *)
; (fun __caml_parser_env -> raise (Parsing.YYexit (Parsing.peek_val __caml_parser_env 0)))
|]
let yytables =
  { Parsing.actions=yyact;
    Parsing.transl_const=yytransl_const;
    Parsing.transl_block=yytransl_block;
    Parsing.lhs=yylhs;
    Parsing.len=yylen;
    Parsing.defred=yydefred;
    Parsing.dgoto=yydgoto;
    Parsing.sindex=yysindex;
    Parsing.rindex=yyrindex;
    Parsing.gindex=yygindex;
    Parsing.tablesize=yytablesize;
    Parsing.table=yytable;
    Parsing.check=yycheck;
    Parsing.error_function=parse_error;
    Parsing.names_const=yynames_const;
    Parsing.names_block=yynames_block }
let program (lexfun : Lexing.lexbuf -> token) (lexbuf : Lexing.lexbuf) =
   (Parsing.yyparse yytables 1 lexfun lexbuf : (Lexing.position * Lexing.position) Exprs.program)
;;
