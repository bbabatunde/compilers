type token =
  | NUM of (int)
  | ID of (string)
  | TYID of (string)
  | DEF
  | ANDDEF
  | CLASS
  | EXTENDS
  | FIELDS
  | METHODS
  | NEW
  | THIS
  | ADD1
  | SUB1
  | LPARENSPACE
  | LPARENNOSPACE
  | RPAREN
  | LBRACK
  | RBRACK
  | LBRACE
  | RBRACE
  | LET
  | IN
  | OF
  | EQUAL
  | COMMA
  | PLUS
  | MINUS
  | TIMES
  | IF
  | COLON
  | ELSECOLON
  | EOF
  | PRINT
  | PRINTSTACK
  | TRUE
  | FALSE
  | ISBOOL
  | ISNUM
  | EQEQ
  | LESSSPACE
  | LESSNOSPACE
  | GREATER
  | LESSEQ
  | GREATEREQ
  | AND
  | OR
  | NOT
  | THINARROW
  | COLONEQ
  | SEMI
  | DOT
  | NIL
  | TYPE
  | LAMBDA
  | BEGIN
  | END
  | REC
  | UNDERSCORE

open Parsing;;
let _ = parse_error;;
# 2 "parser.mly"
open Exprs

let full_span() = (Parsing.symbol_start_pos (), Parsing.symbol_end_pos ())
let tok_span(start, endtok) = (Parsing.rhs_start_pos start, Parsing.rhs_end_pos endtok)
# 69 "parser.ml"
let yytransl_const = [|
  260 (* DEF *);
  261 (* ANDDEF *);
  262 (* CLASS *);
  263 (* EXTENDS *);
  264 (* FIELDS *);
  265 (* METHODS *);
  266 (* NEW *);
  267 (* THIS *);
  268 (* ADD1 *);
  269 (* SUB1 *);
  270 (* LPARENSPACE *);
  271 (* LPARENNOSPACE *);
  272 (* RPAREN *);
  273 (* LBRACK *);
  274 (* RBRACK *);
  275 (* LBRACE *);
  276 (* RBRACE *);
  277 (* LET *);
  278 (* IN *);
  279 (* OF *);
  280 (* EQUAL *);
  281 (* COMMA *);
  282 (* PLUS *);
  283 (* MINUS *);
  284 (* TIMES *);
  285 (* IF *);
  286 (* COLON *);
  287 (* ELSECOLON *);
    0 (* EOF *);
  288 (* PRINT *);
  289 (* PRINTSTACK *);
  290 (* TRUE *);
  291 (* FALSE *);
  292 (* ISBOOL *);
  293 (* ISNUM *);
  294 (* EQEQ *);
  295 (* LESSSPACE *);
  296 (* LESSNOSPACE *);
  297 (* GREATER *);
  298 (* LESSEQ *);
  299 (* GREATEREQ *);
  300 (* AND *);
  301 (* OR *);
  302 (* NOT *);
  303 (* THINARROW *);
  304 (* COLONEQ *);
  305 (* SEMI *);
  306 (* DOT *);
  307 (* NIL *);
  308 (* TYPE *);
  309 (* LAMBDA *);
  310 (* BEGIN *);
  311 (* END *);
  312 (* REC *);
  313 (* UNDERSCORE *);
    0|]

let yytransl_block = [|
  257 (* NUM *);
  258 (* ID *);
  259 (* TYID *);
    0|]

let yylhs = "\255\255\
\002\000\002\000\002\000\002\000\004\000\004\000\004\000\004\000\
\004\000\004\000\004\000\005\000\005\000\008\000\008\000\007\000\
\007\000\007\000\007\000\007\000\007\000\007\000\011\000\011\000\
\012\000\012\000\012\000\012\000\012\000\012\000\014\000\014\000\
\014\000\014\000\014\000\014\000\014\000\014\000\014\000\014\000\
\014\000\014\000\014\000\014\000\014\000\015\000\010\000\010\000\
\010\000\010\000\010\000\010\000\010\000\010\000\010\000\010\000\
\010\000\010\000\016\000\016\000\016\000\016\000\016\000\016\000\
\016\000\018\000\018\000\017\000\017\000\017\000\020\000\013\000\
\013\000\006\000\006\000\021\000\021\000\009\000\009\000\003\000\
\003\000\003\000\022\000\022\000\022\000\022\000\023\000\023\000\
\024\000\024\000\025\000\025\000\026\000\026\000\019\000\019\000\
\027\000\027\000\028\000\028\000\001\000\001\000\000\000"

let yylen = "\002\000\
\001\000\001\000\001\000\003\000\001\000\001\000\001\000\001\000\
\001\000\001\000\001\000\003\000\005\000\003\000\005\000\004\000\
\005\000\006\000\003\000\003\000\001\000\002\000\001\000\003\000\
\008\000\008\000\005\000\008\000\008\000\005\000\004\000\003\000\
\003\000\004\000\003\000\001\000\001\000\005\000\005\000\001\000\
\004\000\006\000\005\000\006\000\001\000\001\000\003\000\003\000\
\003\000\003\000\003\000\003\000\003\000\003\000\003\000\003\000\
\003\000\001\000\006\000\008\000\012\000\007\000\009\000\008\000\
\010\000\003\000\005\000\000\000\001\000\003\000\001\000\001\000\
\003\000\001\000\001\000\001\000\003\000\001\000\003\000\001\000\
\001\000\001\000\005\000\005\000\004\000\004\000\001\000\003\000\
\001\000\003\000\001\000\003\000\000\000\002\000\000\000\002\000\
\006\000\006\000\000\000\002\000\006\000\004\000\002\000"

let yydefred = "\000\000\
\000\000\000\000\000\000\103\000\000\000\000\000\000\000\100\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\094\000\001\000\046\000\000\000\045\000\005\000\006\000\
\000\000\000\000\000\000\000\000\008\000\011\000\002\000\003\000\
\009\000\010\000\007\000\000\000\000\000\037\000\000\000\000\000\
\000\000\036\000\000\000\040\000\000\000\000\000\000\000\000\000\
\000\000\000\000\092\000\022\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\074\000\075\000\000\000\
\000\000\000\000\000\000\000\000\102\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\080\000\071\000\000\000\000\000\
\000\000\081\000\082\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\032\000\
\000\000\000\000\000\000\000\000\033\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\004\000\019\000\000\000\
\000\000\035\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\020\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\098\000\097\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\079\000\000\000\000\000\077\000\016\000\
\000\000\000\000\031\000\101\000\000\000\034\000\041\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\090\000\059\000\
\000\000\073\000\000\000\000\000\070\000\000\000\000\000\000\000\
\000\000\000\000\000\000\030\000\039\000\000\000\000\000\027\000\
\038\000\017\000\000\000\000\000\000\000\024\000\000\000\043\000\
\000\000\086\000\088\000\000\000\085\000\000\000\000\000\062\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\013\000\018\000\044\000\042\000\084\000\
\083\000\060\000\000\000\000\000\000\000\000\000\096\000\064\000\
\000\000\000\000\000\000\000\000\015\000\063\000\000\000\000\000\
\067\000\029\000\028\000\026\000\025\000\000\000\065\000\000\000\
\061\000"

let yydgoto = "\002\000\
\004\000\038\000\089\000\039\000\060\000\095\000\123\000\112\000\
\062\000\041\000\124\000\042\000\096\000\043\000\044\000\011\000\
\098\000\155\000\222\000\090\000\063\000\091\000\141\000\092\000\
\012\000\013\000\005\000\006\000"

let yysindex = "\015\000\
\024\255\000\000\053\255\000\000\024\255\064\255\036\255\000\000\
\089\255\095\255\103\255\064\255\130\003\079\255\255\254\015\255\
\064\255\000\000\000\000\000\000\107\255\000\000\000\000\000\000\
\014\003\043\003\006\255\130\003\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\080\255\130\003\000\000\099\255\018\000\
\188\255\000\000\003\255\000\000\086\255\086\255\007\255\109\255\
\113\255\111\255\000\000\000\000\057\255\043\255\069\255\062\255\
\093\255\122\255\098\255\105\255\106\255\000\000\000\000\102\255\
\086\255\070\255\130\003\086\255\000\000\072\003\143\255\143\255\
\143\255\143\255\143\255\143\255\143\255\143\255\143\255\143\255\
\143\255\130\003\127\255\129\255\000\000\000\000\027\255\032\255\
\108\255\000\000\000\000\117\255\121\255\245\254\114\255\124\255\
\116\255\110\255\112\255\122\255\008\255\008\255\130\003\000\000\
\086\255\008\255\008\255\130\003\000\000\086\255\086\255\125\255\
\119\255\086\255\130\003\130\003\130\003\000\000\000\000\130\255\
\138\000\000\000\123\255\133\255\135\255\135\255\135\255\135\255\
\135\255\135\255\135\255\135\255\135\255\135\255\135\255\000\000\
\013\255\144\255\086\255\136\255\115\255\086\255\118\255\086\255\
\000\000\000\000\130\003\086\255\008\255\010\255\109\255\145\255\
\156\255\146\255\158\255\152\255\153\255\157\255\167\255\168\255\
\170\255\171\255\172\255\000\000\130\003\130\003\000\000\000\000\
\147\255\159\255\000\000\000\000\130\003\000\000\000\000\130\003\
\101\003\175\255\086\255\086\255\177\255\086\255\000\000\000\000\
\165\255\000\000\130\003\086\255\000\000\008\255\122\255\016\255\
\064\255\166\255\169\255\000\000\000\000\174\255\176\255\000\000\
\000\000\000\000\180\255\008\255\130\003\000\000\179\255\000\000\
\184\255\000\000\000\000\185\255\000\000\191\255\130\003\000\000\
\178\255\193\255\189\255\192\255\064\255\163\255\130\003\130\003\
\130\003\130\003\122\255\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\130\003\187\255\064\255\122\255\000\000\000\000\
\203\255\204\255\207\255\208\255\000\000\000\000\086\255\181\255\
\000\000\000\000\000\000\000\000\000\000\195\255\000\000\130\003\
\000\000"

let yyrindex = "\000\000\
\195\002\000\000\000\000\000\000\195\002\159\003\000\000\000\000\
\000\000\000\000\241\002\159\003\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\149\002\000\000\001\000\000\000\000\000\000\000\000\000\197\255\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\082\255\000\000\097\255\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\219\255\000\000\000\000\000\000\000\000\000\000\223\255\000\000\
\199\255\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\225\255\000\000\056\000\111\000\166\000\221\000\
\020\001\075\001\130\001\185\001\240\001\039\002\094\002\000\000\
\000\000\000\000\000\000\209\255\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\197\255\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\220\255\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\202\255\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\238\255\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\246\255\202\255\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\202\255\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000"

let yygindex = "\000\000\
\000\000\072\000\194\255\000\000\061\000\233\255\243\255\039\000\
\200\255\173\000\164\255\000\000\182\255\000\000\000\000\101\255\
\123\000\076\255\056\255\000\000\000\000\000\000\173\255\217\255\
\004\001\012\001\000\000\044\001"

let yytablesize = 1237
let yytable = "\040\000\
\058\000\113\000\118\000\061\000\143\000\121\000\093\000\057\000\
\057\000\057\000\219\000\054\000\056\000\047\000\064\000\001\000\
\019\000\069\000\147\000\083\000\239\000\049\000\094\000\066\000\
\140\000\140\000\156\000\157\000\085\000\086\000\175\000\160\000\
\161\000\085\000\086\000\148\000\248\000\221\000\048\000\187\000\
\087\000\088\000\159\000\154\000\050\000\087\000\088\000\163\000\
\164\000\031\000\032\000\167\000\084\000\120\000\007\000\047\000\
\188\000\249\000\104\000\014\000\176\000\058\000\059\000\059\000\
\059\000\221\000\036\000\009\000\136\000\010\000\101\000\102\000\
\105\000\139\000\186\000\003\000\178\000\109\000\142\000\181\000\
\206\000\221\000\106\000\107\000\209\000\185\000\103\000\085\000\
\086\000\158\000\015\000\110\000\045\000\046\000\162\000\211\000\
\016\000\078\000\108\000\087\000\088\000\168\000\169\000\170\000\
\183\000\078\000\078\000\017\000\052\000\065\000\048\000\097\000\
\076\000\067\000\099\000\218\000\140\000\212\000\100\000\214\000\
\076\000\076\000\111\000\057\000\119\000\217\000\115\000\114\000\
\137\000\116\000\138\000\117\000\145\000\184\000\154\000\144\000\
\146\000\172\000\149\000\150\000\151\000\153\000\166\000\019\000\
\020\000\171\000\165\000\173\000\174\000\070\000\152\000\202\000\
\203\000\022\000\023\000\024\000\025\000\026\000\177\000\190\000\
\179\000\180\000\207\000\191\000\182\000\049\000\193\000\194\000\
\195\000\192\000\113\000\204\000\196\000\216\000\029\000\030\000\
\031\000\032\000\033\000\034\000\061\000\154\000\197\000\198\000\
\254\000\199\000\200\000\201\000\035\000\205\000\210\000\229\000\
\213\000\036\000\215\000\223\000\230\000\237\000\224\000\231\000\
\232\000\234\000\070\000\225\000\227\000\226\000\233\000\235\000\
\236\000\241\000\242\000\243\000\244\000\071\000\072\000\073\000\
\238\000\240\000\250\000\251\000\057\000\246\000\252\000\253\000\
\000\001\074\000\075\000\076\000\077\000\078\000\079\000\080\000\
\081\000\247\000\089\000\255\000\082\000\068\000\072\000\069\000\
\023\000\012\000\001\001\125\000\126\000\127\000\128\000\129\000\
\130\000\131\000\132\000\133\000\134\000\135\000\066\000\087\000\
\095\000\058\000\058\000\014\000\058\000\058\000\058\000\220\000\
\228\000\245\000\058\000\058\000\058\000\058\000\058\000\058\000\
\058\000\189\000\058\000\054\000\051\000\058\000\058\000\018\000\
\000\000\058\000\058\000\058\000\058\000\058\000\058\000\058\000\
\058\000\058\000\058\000\058\000\058\000\058\000\058\000\058\000\
\058\000\058\000\058\000\058\000\058\000\058\000\058\000\068\000\
\008\000\058\000\000\000\058\000\000\000\000\000\058\000\058\000\
\047\000\047\000\000\000\047\000\047\000\047\000\000\000\000\000\
\000\000\047\000\047\000\047\000\047\000\047\000\000\000\047\000\
\000\000\047\000\055\000\000\000\047\000\047\000\000\000\000\000\
\047\000\047\000\047\000\047\000\047\000\047\000\047\000\047\000\
\047\000\047\000\047\000\047\000\047\000\047\000\047\000\047\000\
\047\000\047\000\047\000\047\000\047\000\047\000\000\000\000\000\
\047\000\000\000\047\000\000\000\000\000\047\000\047\000\048\000\
\048\000\000\000\048\000\048\000\048\000\000\000\000\000\000\000\
\048\000\048\000\048\000\048\000\048\000\000\000\048\000\000\000\
\048\000\052\000\000\000\048\000\048\000\000\000\000\000\048\000\
\048\000\048\000\048\000\048\000\048\000\048\000\048\000\048\000\
\048\000\048\000\048\000\048\000\048\000\048\000\048\000\048\000\
\048\000\048\000\048\000\048\000\048\000\000\000\000\000\048\000\
\000\000\048\000\000\000\000\000\048\000\048\000\049\000\049\000\
\000\000\049\000\049\000\049\000\000\000\000\000\000\000\049\000\
\049\000\049\000\049\000\049\000\000\000\049\000\000\000\049\000\
\056\000\000\000\049\000\049\000\000\000\000\000\049\000\049\000\
\049\000\049\000\049\000\049\000\049\000\049\000\049\000\049\000\
\049\000\049\000\049\000\049\000\049\000\049\000\049\000\049\000\
\049\000\049\000\049\000\049\000\000\000\000\000\049\000\000\000\
\049\000\000\000\000\000\049\000\049\000\057\000\057\000\000\000\
\057\000\057\000\057\000\000\000\000\000\000\000\057\000\057\000\
\057\000\057\000\057\000\000\000\057\000\000\000\057\000\053\000\
\000\000\057\000\057\000\000\000\000\000\057\000\057\000\057\000\
\057\000\057\000\057\000\057\000\057\000\057\000\057\000\057\000\
\057\000\057\000\057\000\057\000\057\000\057\000\057\000\057\000\
\057\000\057\000\057\000\000\000\000\000\057\000\000\000\057\000\
\000\000\000\000\057\000\057\000\054\000\054\000\000\000\054\000\
\054\000\054\000\000\000\000\000\000\000\054\000\054\000\054\000\
\054\000\054\000\000\000\054\000\000\000\054\000\050\000\000\000\
\054\000\054\000\000\000\000\000\054\000\054\000\054\000\054\000\
\054\000\054\000\054\000\054\000\054\000\054\000\054\000\054\000\
\054\000\054\000\054\000\054\000\054\000\054\000\054\000\054\000\
\054\000\054\000\000\000\000\000\054\000\000\000\054\000\000\000\
\000\000\054\000\054\000\055\000\055\000\000\000\055\000\055\000\
\055\000\000\000\000\000\000\000\055\000\055\000\055\000\055\000\
\055\000\000\000\055\000\000\000\055\000\051\000\000\000\055\000\
\055\000\000\000\000\000\055\000\055\000\055\000\055\000\055\000\
\055\000\055\000\055\000\055\000\055\000\055\000\055\000\055\000\
\055\000\055\000\055\000\055\000\055\000\055\000\055\000\055\000\
\055\000\000\000\000\000\055\000\000\000\055\000\000\000\000\000\
\055\000\055\000\052\000\052\000\000\000\052\000\052\000\052\000\
\000\000\000\000\000\000\052\000\052\000\052\000\052\000\052\000\
\000\000\052\000\000\000\052\000\021\000\000\000\052\000\052\000\
\000\000\000\000\052\000\052\000\052\000\052\000\052\000\052\000\
\052\000\052\000\052\000\052\000\052\000\052\000\052\000\052\000\
\052\000\052\000\052\000\052\000\052\000\052\000\052\000\052\000\
\000\000\000\000\052\000\000\000\052\000\000\000\000\000\052\000\
\052\000\056\000\056\000\000\000\056\000\056\000\056\000\000\000\
\000\000\000\000\056\000\056\000\056\000\056\000\056\000\000\000\
\056\000\000\000\056\000\000\000\000\000\056\000\056\000\000\000\
\000\000\056\000\056\000\056\000\056\000\056\000\056\000\056\000\
\056\000\056\000\056\000\056\000\056\000\056\000\056\000\056\000\
\056\000\056\000\056\000\056\000\056\000\056\000\056\000\000\000\
\000\000\056\000\000\000\056\000\000\000\000\000\056\000\056\000\
\053\000\053\000\000\000\053\000\053\000\053\000\000\000\000\000\
\000\000\053\000\053\000\053\000\053\000\053\000\000\000\053\000\
\000\000\053\000\000\000\000\000\053\000\053\000\000\000\000\000\
\053\000\053\000\053\000\053\000\053\000\053\000\053\000\053\000\
\053\000\053\000\053\000\053\000\053\000\053\000\053\000\053\000\
\053\000\053\000\053\000\053\000\053\000\053\000\000\000\000\000\
\053\000\000\000\053\000\000\000\000\000\053\000\053\000\050\000\
\050\000\000\000\050\000\050\000\050\000\000\000\000\000\000\000\
\050\000\050\000\050\000\050\000\050\000\000\000\050\000\000\000\
\050\000\000\000\000\000\050\000\050\000\000\000\000\000\050\000\
\050\000\050\000\050\000\050\000\050\000\050\000\050\000\050\000\
\050\000\050\000\050\000\050\000\050\000\050\000\050\000\050\000\
\050\000\050\000\050\000\050\000\050\000\000\000\000\000\050\000\
\000\000\050\000\000\000\000\000\050\000\050\000\051\000\051\000\
\000\000\051\000\051\000\051\000\000\000\000\000\000\000\051\000\
\051\000\051\000\051\000\051\000\000\000\051\000\000\000\051\000\
\000\000\000\000\051\000\051\000\000\000\000\000\051\000\051\000\
\051\000\051\000\051\000\051\000\051\000\051\000\051\000\051\000\
\051\000\051\000\051\000\051\000\051\000\051\000\051\000\051\000\
\051\000\051\000\051\000\051\000\000\000\000\000\051\000\000\000\
\051\000\000\000\000\000\051\000\051\000\021\000\021\000\000\000\
\021\000\021\000\021\000\000\000\000\000\000\000\021\000\021\000\
\021\000\021\000\021\000\000\000\021\000\000\000\021\000\000\000\
\000\000\021\000\021\000\000\000\000\000\021\000\000\000\000\000\
\000\000\021\000\021\000\021\000\021\000\021\000\021\000\021\000\
\021\000\021\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\021\000\099\000\099\000\000\000\099\000\021\000\
\099\000\000\000\021\000\021\000\099\000\099\000\099\000\099\000\
\099\000\099\000\000\000\000\000\000\000\000\000\000\000\099\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\099\000\
\000\000\000\000\099\000\099\000\099\000\099\000\099\000\099\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\099\000\091\000\091\000\000\000\091\000\099\000\091\000\000\000\
\099\000\000\000\091\000\091\000\091\000\091\000\091\000\091\000\
\000\000\000\000\000\000\000\000\000\000\091\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\091\000\019\000\020\000\
\091\000\091\000\091\000\091\000\091\000\091\000\000\000\021\000\
\022\000\023\000\024\000\025\000\026\000\000\000\091\000\000\000\
\000\000\000\000\027\000\091\000\000\000\000\000\091\000\000\000\
\000\000\000\000\028\000\019\000\020\000\029\000\030\000\031\000\
\032\000\033\000\034\000\000\000\021\000\022\000\023\000\024\000\
\025\000\026\000\000\000\035\000\000\000\000\000\000\000\027\000\
\036\000\000\000\053\000\037\000\000\000\000\000\000\000\028\000\
\019\000\020\000\029\000\030\000\031\000\032\000\033\000\034\000\
\000\000\021\000\022\000\023\000\024\000\025\000\026\000\122\000\
\035\000\000\000\000\000\000\000\027\000\036\000\000\000\055\000\
\037\000\000\000\000\000\000\000\028\000\019\000\020\000\029\000\
\030\000\031\000\032\000\033\000\034\000\000\000\021\000\022\000\
\023\000\024\000\025\000\026\000\208\000\035\000\000\000\000\000\
\000\000\027\000\036\000\000\000\000\000\037\000\000\000\000\000\
\000\000\028\000\019\000\020\000\029\000\030\000\031\000\032\000\
\033\000\034\000\000\000\021\000\022\000\023\000\024\000\025\000\
\026\000\000\000\035\000\000\000\000\000\000\000\027\000\036\000\
\000\000\000\000\037\000\000\000\000\000\000\000\028\000\093\000\
\093\000\029\000\030\000\031\000\032\000\033\000\034\000\000\000\
\093\000\093\000\093\000\093\000\093\000\093\000\000\000\035\000\
\000\000\000\000\000\000\093\000\036\000\000\000\000\000\037\000\
\000\000\000\000\000\000\093\000\000\000\000\000\093\000\093\000\
\093\000\093\000\093\000\093\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\093\000\000\000\000\000\000\000\
\000\000\093\000\000\000\000\000\093\000"

let yycheck = "\013\000\
\000\000\058\000\065\000\027\000\088\000\068\000\046\000\002\001\
\002\001\002\001\191\000\025\000\026\000\015\001\028\000\001\000\
\001\001\000\000\030\001\017\001\221\000\007\001\016\001\037\000\
\087\000\088\000\101\000\102\000\002\001\003\001\018\001\106\000\
\107\000\002\001\003\001\047\001\237\000\193\000\040\001\030\001\
\014\001\015\001\105\000\100\000\030\001\014\001\015\001\110\000\
\111\000\034\001\035\001\114\000\050\001\067\000\002\001\000\000\
\047\001\238\000\016\001\024\001\048\001\056\001\057\001\057\001\
\057\001\221\000\051\001\004\001\082\000\006\001\014\001\015\001\
\030\001\047\001\149\000\052\001\139\000\016\001\047\001\142\000\
\173\000\237\000\014\001\015\001\177\000\148\000\030\001\002\001\
\003\001\103\000\002\001\030\001\014\001\015\001\108\000\179\000\
\002\001\016\001\030\001\014\001\015\001\115\000\116\000\117\000\
\144\000\024\001\025\001\005\001\002\001\030\001\000\000\003\001\
\016\001\015\001\002\001\190\000\179\000\180\000\008\001\182\000\
\024\001\025\001\030\001\002\001\055\001\188\000\022\001\030\001\
\002\001\024\001\002\001\030\001\016\001\147\000\191\000\028\001\
\016\001\000\000\025\001\016\001\025\001\030\001\024\001\001\001\
\002\001\016\001\022\001\025\001\016\001\015\001\041\001\165\000\
\166\000\011\001\012\001\013\001\014\001\015\001\015\001\015\001\
\025\001\047\001\176\000\008\001\047\001\000\000\009\001\016\001\
\016\001\024\001\227\000\025\001\016\001\187\000\032\001\033\001\
\034\001\035\001\036\001\037\001\204\000\238\000\016\001\016\001\
\247\000\016\001\016\001\016\001\046\001\031\001\016\001\205\000\
\016\001\051\001\030\001\030\001\018\001\009\001\030\001\016\001\
\016\001\215\000\015\001\030\001\025\001\030\001\016\001\030\001\
\016\001\223\000\224\000\225\000\226\000\026\001\027\001\028\001\
\025\001\055\001\016\001\016\001\000\000\235\000\016\001\016\001\
\030\001\038\001\039\001\040\001\041\001\042\001\043\001\044\001\
\045\001\047\001\016\001\055\001\049\001\041\001\016\001\041\001\
\016\001\022\001\000\001\071\000\072\000\073\000\074\000\075\000\
\076\000\077\000\078\000\079\000\080\000\081\000\009\001\047\001\
\055\001\001\001\002\001\022\001\004\001\005\001\006\001\192\000\
\204\000\227\000\010\001\011\001\012\001\013\001\014\001\015\001\
\016\001\151\000\018\001\000\000\017\000\021\001\022\001\012\000\
\255\255\025\001\026\001\027\001\028\001\029\001\030\001\031\001\
\032\001\033\001\034\001\035\001\036\001\037\001\038\001\039\001\
\040\001\041\001\042\001\043\001\044\001\045\001\046\001\030\001\
\005\000\049\001\255\255\051\001\255\255\255\255\054\001\055\001\
\001\001\002\001\255\255\004\001\005\001\006\001\255\255\255\255\
\255\255\010\001\011\001\012\001\013\001\014\001\255\255\016\001\
\255\255\018\001\000\000\255\255\021\001\022\001\255\255\255\255\
\025\001\026\001\027\001\028\001\029\001\030\001\031\001\032\001\
\033\001\034\001\035\001\036\001\037\001\038\001\039\001\040\001\
\041\001\042\001\043\001\044\001\045\001\046\001\255\255\255\255\
\049\001\255\255\051\001\255\255\255\255\054\001\055\001\001\001\
\002\001\255\255\004\001\005\001\006\001\255\255\255\255\255\255\
\010\001\011\001\012\001\013\001\014\001\255\255\016\001\255\255\
\018\001\000\000\255\255\021\001\022\001\255\255\255\255\025\001\
\026\001\027\001\028\001\029\001\030\001\031\001\032\001\033\001\
\034\001\035\001\036\001\037\001\038\001\039\001\040\001\041\001\
\042\001\043\001\044\001\045\001\046\001\255\255\255\255\049\001\
\255\255\051\001\255\255\255\255\054\001\055\001\001\001\002\001\
\255\255\004\001\005\001\006\001\255\255\255\255\255\255\010\001\
\011\001\012\001\013\001\014\001\255\255\016\001\255\255\018\001\
\000\000\255\255\021\001\022\001\255\255\255\255\025\001\026\001\
\027\001\028\001\029\001\030\001\031\001\032\001\033\001\034\001\
\035\001\036\001\037\001\038\001\039\001\040\001\041\001\042\001\
\043\001\044\001\045\001\046\001\255\255\255\255\049\001\255\255\
\051\001\255\255\255\255\054\001\055\001\001\001\002\001\255\255\
\004\001\005\001\006\001\255\255\255\255\255\255\010\001\011\001\
\012\001\013\001\014\001\255\255\016\001\255\255\018\001\000\000\
\255\255\021\001\022\001\255\255\255\255\025\001\026\001\027\001\
\028\001\029\001\030\001\031\001\032\001\033\001\034\001\035\001\
\036\001\037\001\038\001\039\001\040\001\041\001\042\001\043\001\
\044\001\045\001\046\001\255\255\255\255\049\001\255\255\051\001\
\255\255\255\255\054\001\055\001\001\001\002\001\255\255\004\001\
\005\001\006\001\255\255\255\255\255\255\010\001\011\001\012\001\
\013\001\014\001\255\255\016\001\255\255\018\001\000\000\255\255\
\021\001\022\001\255\255\255\255\025\001\026\001\027\001\028\001\
\029\001\030\001\031\001\032\001\033\001\034\001\035\001\036\001\
\037\001\038\001\039\001\040\001\041\001\042\001\043\001\044\001\
\045\001\046\001\255\255\255\255\049\001\255\255\051\001\255\255\
\255\255\054\001\055\001\001\001\002\001\255\255\004\001\005\001\
\006\001\255\255\255\255\255\255\010\001\011\001\012\001\013\001\
\014\001\255\255\016\001\255\255\018\001\000\000\255\255\021\001\
\022\001\255\255\255\255\025\001\026\001\027\001\028\001\029\001\
\030\001\031\001\032\001\033\001\034\001\035\001\036\001\037\001\
\038\001\039\001\040\001\041\001\042\001\043\001\044\001\045\001\
\046\001\255\255\255\255\049\001\255\255\051\001\255\255\255\255\
\054\001\055\001\001\001\002\001\255\255\004\001\005\001\006\001\
\255\255\255\255\255\255\010\001\011\001\012\001\013\001\014\001\
\255\255\016\001\255\255\018\001\000\000\255\255\021\001\022\001\
\255\255\255\255\025\001\026\001\027\001\028\001\029\001\030\001\
\031\001\032\001\033\001\034\001\035\001\036\001\037\001\038\001\
\039\001\040\001\041\001\042\001\043\001\044\001\045\001\046\001\
\255\255\255\255\049\001\255\255\051\001\255\255\255\255\054\001\
\055\001\001\001\002\001\255\255\004\001\005\001\006\001\255\255\
\255\255\255\255\010\001\011\001\012\001\013\001\014\001\255\255\
\016\001\255\255\018\001\255\255\255\255\021\001\022\001\255\255\
\255\255\025\001\026\001\027\001\028\001\029\001\030\001\031\001\
\032\001\033\001\034\001\035\001\036\001\037\001\038\001\039\001\
\040\001\041\001\042\001\043\001\044\001\045\001\046\001\255\255\
\255\255\049\001\255\255\051\001\255\255\255\255\054\001\055\001\
\001\001\002\001\255\255\004\001\005\001\006\001\255\255\255\255\
\255\255\010\001\011\001\012\001\013\001\014\001\255\255\016\001\
\255\255\018\001\255\255\255\255\021\001\022\001\255\255\255\255\
\025\001\026\001\027\001\028\001\029\001\030\001\031\001\032\001\
\033\001\034\001\035\001\036\001\037\001\038\001\039\001\040\001\
\041\001\042\001\043\001\044\001\045\001\046\001\255\255\255\255\
\049\001\255\255\051\001\255\255\255\255\054\001\055\001\001\001\
\002\001\255\255\004\001\005\001\006\001\255\255\255\255\255\255\
\010\001\011\001\012\001\013\001\014\001\255\255\016\001\255\255\
\018\001\255\255\255\255\021\001\022\001\255\255\255\255\025\001\
\026\001\027\001\028\001\029\001\030\001\031\001\032\001\033\001\
\034\001\035\001\036\001\037\001\038\001\039\001\040\001\041\001\
\042\001\043\001\044\001\045\001\046\001\255\255\255\255\049\001\
\255\255\051\001\255\255\255\255\054\001\055\001\001\001\002\001\
\255\255\004\001\005\001\006\001\255\255\255\255\255\255\010\001\
\011\001\012\001\013\001\014\001\255\255\016\001\255\255\018\001\
\255\255\255\255\021\001\022\001\255\255\255\255\025\001\026\001\
\027\001\028\001\029\001\030\001\031\001\032\001\033\001\034\001\
\035\001\036\001\037\001\038\001\039\001\040\001\041\001\042\001\
\043\001\044\001\045\001\046\001\255\255\255\255\049\001\255\255\
\051\001\255\255\255\255\054\001\055\001\001\001\002\001\255\255\
\004\001\005\001\006\001\255\255\255\255\255\255\010\001\011\001\
\012\001\013\001\014\001\255\255\016\001\255\255\018\001\255\255\
\255\255\021\001\022\001\255\255\255\255\025\001\255\255\255\255\
\255\255\029\001\030\001\031\001\032\001\033\001\034\001\035\001\
\036\001\037\001\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\046\001\001\001\002\001\255\255\004\001\051\001\
\006\001\255\255\054\001\055\001\010\001\011\001\012\001\013\001\
\014\001\015\001\255\255\255\255\255\255\255\255\255\255\021\001\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\029\001\
\255\255\255\255\032\001\033\001\034\001\035\001\036\001\037\001\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\046\001\001\001\002\001\255\255\004\001\051\001\006\001\255\255\
\054\001\255\255\010\001\011\001\012\001\013\001\014\001\015\001\
\255\255\255\255\255\255\255\255\255\255\021\001\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\029\001\001\001\002\001\
\032\001\033\001\034\001\035\001\036\001\037\001\255\255\010\001\
\011\001\012\001\013\001\014\001\015\001\255\255\046\001\255\255\
\255\255\255\255\021\001\051\001\255\255\255\255\054\001\255\255\
\255\255\255\255\029\001\001\001\002\001\032\001\033\001\034\001\
\035\001\036\001\037\001\255\255\010\001\011\001\012\001\013\001\
\014\001\015\001\255\255\046\001\255\255\255\255\255\255\021\001\
\051\001\255\255\053\001\054\001\255\255\255\255\255\255\029\001\
\001\001\002\001\032\001\033\001\034\001\035\001\036\001\037\001\
\255\255\010\001\011\001\012\001\013\001\014\001\015\001\016\001\
\046\001\255\255\255\255\255\255\021\001\051\001\255\255\053\001\
\054\001\255\255\255\255\255\255\029\001\001\001\002\001\032\001\
\033\001\034\001\035\001\036\001\037\001\255\255\010\001\011\001\
\012\001\013\001\014\001\015\001\016\001\046\001\255\255\255\255\
\255\255\021\001\051\001\255\255\255\255\054\001\255\255\255\255\
\255\255\029\001\001\001\002\001\032\001\033\001\034\001\035\001\
\036\001\037\001\255\255\010\001\011\001\012\001\013\001\014\001\
\015\001\255\255\046\001\255\255\255\255\255\255\021\001\051\001\
\255\255\255\255\054\001\255\255\255\255\255\255\029\001\001\001\
\002\001\032\001\033\001\034\001\035\001\036\001\037\001\255\255\
\010\001\011\001\012\001\013\001\014\001\015\001\255\255\046\001\
\255\255\255\255\255\255\021\001\051\001\255\255\255\255\054\001\
\255\255\255\255\255\255\029\001\255\255\255\255\032\001\033\001\
\034\001\035\001\036\001\037\001\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\046\001\255\255\255\255\255\255\
\255\255\051\001\255\255\255\255\054\001"

let yynames_const = "\
  DEF\000\
  ANDDEF\000\
  CLASS\000\
  EXTENDS\000\
  FIELDS\000\
  METHODS\000\
  NEW\000\
  THIS\000\
  ADD1\000\
  SUB1\000\
  LPARENSPACE\000\
  LPARENNOSPACE\000\
  RPAREN\000\
  LBRACK\000\
  RBRACK\000\
  LBRACE\000\
  RBRACE\000\
  LET\000\
  IN\000\
  OF\000\
  EQUAL\000\
  COMMA\000\
  PLUS\000\
  MINUS\000\
  TIMES\000\
  IF\000\
  COLON\000\
  ELSECOLON\000\
  EOF\000\
  PRINT\000\
  PRINTSTACK\000\
  TRUE\000\
  FALSE\000\
  ISBOOL\000\
  ISNUM\000\
  EQEQ\000\
  LESSSPACE\000\
  LESSNOSPACE\000\
  GREATER\000\
  LESSEQ\000\
  GREATEREQ\000\
  AND\000\
  OR\000\
  NOT\000\
  THINARROW\000\
  COLONEQ\000\
  SEMI\000\
  DOT\000\
  NIL\000\
  TYPE\000\
  LAMBDA\000\
  BEGIN\000\
  END\000\
  REC\000\
  UNDERSCORE\000\
  "

let yynames_block = "\
  NUM\000\
  ID\000\
  TYID\000\
  "

let yyact = [|
  (fun _ -> failwith "parser")
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : int) in
    Obj.repr(
# 25 "parser.mly"
        ( ENumber(_1, full_span()) )
# 667 "parser.ml"
               : 'const))
; (fun __caml_parser_env ->
    Obj.repr(
# 26 "parser.mly"
         ( EBool(true, full_span()) )
# 673 "parser.ml"
               : 'const))
; (fun __caml_parser_env ->
    Obj.repr(
# 27 "parser.mly"
          ( EBool(false, full_span()) )
# 679 "parser.ml"
               : 'const))
; (fun __caml_parser_env ->
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'typ) in
    Obj.repr(
# 28 "parser.mly"
                  ( ENil(_3, full_span()) )
# 686 "parser.ml"
               : 'const))
; (fun __caml_parser_env ->
    Obj.repr(
# 31 "parser.mly"
         ( Add1 )
# 692 "parser.ml"
               : 'prim1))
; (fun __caml_parser_env ->
    Obj.repr(
# 32 "parser.mly"
         ( Sub1 )
# 698 "parser.ml"
               : 'prim1))
; (fun __caml_parser_env ->
    Obj.repr(
# 33 "parser.mly"
        ( Not )
# 704 "parser.ml"
               : 'prim1))
; (fun __caml_parser_env ->
    Obj.repr(
# 34 "parser.mly"
          ( Print )
# 710 "parser.ml"
               : 'prim1))
; (fun __caml_parser_env ->
    Obj.repr(
# 35 "parser.mly"
           ( IsBool )
# 716 "parser.ml"
               : 'prim1))
; (fun __caml_parser_env ->
    Obj.repr(
# 36 "parser.mly"
          ( IsNum )
# 722 "parser.ml"
               : 'prim1))
; (fun __caml_parser_env ->
    Obj.repr(
# 37 "parser.mly"
               ( PrintStack )
# 728 "parser.ml"
               : 'prim1))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'bind) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 40 "parser.mly"
                    ( [(_1, _3, full_span())] )
# 736 "parser.ml"
               : 'bindings))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 4 : 'bind) in
    let _3 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _5 = (Parsing.peek_val __caml_parser_env 0 : 'bindings) in
    Obj.repr(
# 41 "parser.mly"
                                   ( (_1, _3, tok_span(1, 3))::_5 )
# 745 "parser.ml"
               : 'bindings))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'namebind) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 44 "parser.mly"
                        ( [(_1, _3, full_span())] )
# 753 "parser.ml"
               : 'namebindings))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 4 : 'namebind) in
    let _3 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _5 = (Parsing.peek_val __caml_parser_env 0 : 'namebindings) in
    Obj.repr(
# 45 "parser.mly"
                                           ( (_1, _3, tok_span(1, 3))::_5 )
# 762 "parser.ml"
               : 'namebindings))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 2 : 'bindings) in
    let _4 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 48 "parser.mly"
                         ( ELet(_2, _4, full_span()) )
# 770 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _3 = (Parsing.peek_val __caml_parser_env 2 : 'namebindings) in
    let _5 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 49 "parser.mly"
                                 ( ELetRec(_3, _5, full_span()) )
# 778 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 4 : 'expr) in
    let _4 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _6 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 50 "parser.mly"
                                      ( EIf(_2, _4, _6, full_span()) )
# 787 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 1 : 'expr) in
    Obj.repr(
# 51 "parser.mly"
                   ( _2 )
# 794 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'binop_expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 52 "parser.mly"
                         ( ESeq(_1, _3, full_span()) )
# 802 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'binop_expr) in
    Obj.repr(
# 53 "parser.mly"
                          ( _1 )
# 809 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 0 : string) in
    Obj.repr(
# 54 "parser.mly"
           ( ENewObject(_2, full_span()) )
# 816 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 57 "parser.mly"
         ( [_1] )
# 823 "parser.ml"
               : 'exprs))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'exprs) in
    Obj.repr(
# 58 "parser.mly"
                     ( _1::_3 )
# 831 "parser.ml"
               : 'exprs))
; (fun __caml_parser_env ->
    let _4 = (Parsing.peek_val __caml_parser_env 4 : 'binds) in
    let _7 = (Parsing.peek_val __caml_parser_env 1 : 'expr) in
    Obj.repr(
# 62 "parser.mly"
                                                                      ( ELambda(_4, _7, full_span()) )
# 839 "parser.ml"
               : 'lambda_expr))
; (fun __caml_parser_env ->
    let _4 = (Parsing.peek_val __caml_parser_env 4 : 'binds) in
    let _7 = (Parsing.peek_val __caml_parser_env 1 : 'expr) in
    Obj.repr(
# 63 "parser.mly"
                                                                    ( ELambda(_4, _7, full_span()) )
# 847 "parser.ml"
               : 'lambda_expr))
; (fun __caml_parser_env ->
    let _4 = (Parsing.peek_val __caml_parser_env 1 : 'expr) in
    Obj.repr(
# 64 "parser.mly"
                                           ( ELambda([], _4, full_span()) )
# 854 "parser.ml"
               : 'lambda_expr))
; (fun __caml_parser_env ->
    let _4 = (Parsing.peek_val __caml_parser_env 4 : 'binds) in
    let _7 = (Parsing.peek_val __caml_parser_env 1 : 'expr) in
    Obj.repr(
# 65 "parser.mly"
                                                                    ( ELambda(_4, _7, full_span()) )
# 862 "parser.ml"
               : 'lambda_expr))
; (fun __caml_parser_env ->
    let _4 = (Parsing.peek_val __caml_parser_env 4 : 'binds) in
    let _7 = (Parsing.peek_val __caml_parser_env 1 : 'expr) in
    Obj.repr(
# 66 "parser.mly"
                                                                  ( ELambda(_4, _7, full_span()) )
# 870 "parser.ml"
               : 'lambda_expr))
; (fun __caml_parser_env ->
    let _4 = (Parsing.peek_val __caml_parser_env 1 : 'expr) in
    Obj.repr(
# 67 "parser.mly"
                                         ( ELambda([], _4, full_span()) )
# 877 "parser.ml"
               : 'lambda_expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 3 : 'prim1) in
    let _3 = (Parsing.peek_val __caml_parser_env 1 : 'expr) in
    Obj.repr(
# 72 "parser.mly"
                                    ( EPrim1(_1, _3, full_span()) )
# 885 "parser.ml"
               : 'simple_expr))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 1 : 'expr) in
    Obj.repr(
# 74 "parser.mly"
                            ( _2 )
# 892 "parser.ml"
               : 'simple_expr))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 1 : 'expr) in
    Obj.repr(
# 75 "parser.mly"
                              ( _2 )
# 899 "parser.ml"
               : 'simple_expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 3 : 'binop_expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 1 : 'exprs) in
    Obj.repr(
# 77 "parser.mly"
                                          ( EApp(_1, _3, full_span()) )
# 907 "parser.ml"
               : 'simple_expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'binop_expr) in
    Obj.repr(
# 78 "parser.mly"
                                    ( EApp(_1, [], full_span()) )
# 914 "parser.ml"
               : 'simple_expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'lambda_expr) in
    Obj.repr(
# 80 "parser.mly"
                ( _1 )
# 921 "parser.ml"
               : 'simple_expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'const) in
    Obj.repr(
# 82 "parser.mly"
          ( _1 )
# 928 "parser.ml"
               : 'simple_expr))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 3 : 'expr) in
    let _4 = (Parsing.peek_val __caml_parser_env 1 : 'typ) in
    Obj.repr(
# 83 "parser.mly"
                                        ( EAnnot(_2, _4, full_span()) )
# 936 "parser.ml"
               : 'simple_expr))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 3 : 'expr) in
    let _4 = (Parsing.peek_val __caml_parser_env 1 : 'typ) in
    Obj.repr(
# 84 "parser.mly"
                                      ( EAnnot(_2, _4, full_span()) )
# 944 "parser.ml"
               : 'simple_expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'id) in
    Obj.repr(
# 85 "parser.mly"
       ( _1 )
# 951 "parser.ml"
               : 'simple_expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 3 : 'simple_expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 1 : string) in
    Obj.repr(
# 87 "parser.mly"
                                 ( EGetField(_1, _3, full_span()) )
# 959 "parser.ml"
               : 'simple_expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 5 : 'simple_expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 3 : string) in
    let _5 = (Parsing.peek_val __caml_parser_env 1 : 'exprs) in
    Obj.repr(
# 88 "parser.mly"
                                                  ( EMethodCall(_1, _3, _5, _3, full_span()) )
# 968 "parser.ml"
               : 'simple_expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 4 : 'simple_expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 2 : string) in
    Obj.repr(
# 89 "parser.mly"
                                            ( EMethodCall(_1, _3, [], _3, full_span()) )
# 976 "parser.ml"
               : 'simple_expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 5 : 'simple_expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 3 : string) in
    let _5 = (Parsing.peek_val __caml_parser_env 1 : 'expr) in
    Obj.repr(
# 90 "parser.mly"
                                              ( ESetField(_1, _3, _5, _3, full_span()) )
# 985 "parser.ml"
               : 'simple_expr))
; (fun __caml_parser_env ->
    Obj.repr(
# 91 "parser.mly"
         ( EThis(full_span()) )
# 991 "parser.ml"
               : 'simple_expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : string) in
    Obj.repr(
# 94 "parser.mly"
                   ( EId(_1, full_span()) )
# 998 "parser.ml"
               : 'id))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'binop_expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'binop_expr) in
    Obj.repr(
# 98 "parser.mly"
                               ( EPrim2(Plus, _1, _3, full_span()) )
# 1006 "parser.ml"
               : 'binop_expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'binop_expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'binop_expr) in
    Obj.repr(
# 99 "parser.mly"
                                ( EPrim2(Minus, _1, _3, full_span()) )
# 1014 "parser.ml"
               : 'binop_expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'binop_expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'binop_expr) in
    Obj.repr(
# 100 "parser.mly"
                                ( EPrim2(Times, _1, _3, full_span()) )
# 1022 "parser.ml"
               : 'binop_expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'binop_expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'binop_expr) in
    Obj.repr(
# 101 "parser.mly"
                              ( EPrim2(And, _1, _3, full_span()) )
# 1030 "parser.ml"
               : 'binop_expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'binop_expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'binop_expr) in
    Obj.repr(
# 102 "parser.mly"
                             ( EPrim2(Or, _1, _3, full_span()) )
# 1038 "parser.ml"
               : 'binop_expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'binop_expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'binop_expr) in
    Obj.repr(
# 103 "parser.mly"
                                  ( EPrim2(Greater, _1, _3, full_span()) )
# 1046 "parser.ml"
               : 'binop_expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'binop_expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'binop_expr) in
    Obj.repr(
# 104 "parser.mly"
                                    ( EPrim2(GreaterEq, _1, _3, full_span()) )
# 1054 "parser.ml"
               : 'binop_expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'binop_expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'binop_expr) in
    Obj.repr(
# 105 "parser.mly"
                                    ( EPrim2(Less, _1, _3, full_span()) )
# 1062 "parser.ml"
               : 'binop_expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'binop_expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'binop_expr) in
    Obj.repr(
# 106 "parser.mly"
                                      ( EPrim2(Less, _1, _3, full_span()) )
# 1070 "parser.ml"
               : 'binop_expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'binop_expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'binop_expr) in
    Obj.repr(
# 107 "parser.mly"
                                 ( EPrim2(LessEq, _1, _3, full_span()) )
# 1078 "parser.ml"
               : 'binop_expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'binop_expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'binop_expr) in
    Obj.repr(
# 108 "parser.mly"
                               ( EPrim2(Eq, _1, _3, full_span()) )
# 1086 "parser.ml"
               : 'binop_expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'simple_expr) in
    Obj.repr(
# 109 "parser.mly"
                ( _1 )
# 1093 "parser.ml"
               : 'binop_expr))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 4 : string) in
    let _6 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 113 "parser.mly"
    ( let arg_pos = Parsing.rhs_start_pos 3, Parsing.rhs_end_pos 4 in
      DFun(_2, [], SForall([], TyArr([], TyBlank arg_pos, arg_pos), arg_pos), _6, full_span()) )
# 1102 "parser.ml"
               : 'decl))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 6 : string) in
    let _6 = (Parsing.peek_val __caml_parser_env 2 : 'typ) in
    let _8 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 116 "parser.mly"
    (
      let typ_pos = tok_span(6, 6) in
      DFun(_2, [], SForall([], TyArr([], _6, typ_pos), typ_pos), _8, full_span()) )
# 1113 "parser.ml"
               : 'decl))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 10 : string) in
    let _4 = (Parsing.peek_val __caml_parser_env 8 : 'tyids) in
    let _7 = (Parsing.peek_val __caml_parser_env 5 : 'binds) in
    let _10 = (Parsing.peek_val __caml_parser_env 2 : 'typ) in
    let _12 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 120 "parser.mly"
    (
      let arg_types = List.map bind_to_typ _7 in
      let arrow_pos = (Parsing.rhs_start_pos 6, Parsing.rhs_end_pos 10) in
      let typ_pos = (Parsing.rhs_start_pos 3, Parsing.rhs_end_pos 10) in
      DFun(_2, _7, SForall(_4, TyArr(arg_types, _10, arrow_pos), typ_pos), _12, full_span())
    )
# 1129 "parser.ml"
               : 'decl))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 5 : string) in
    let _4 = (Parsing.peek_val __caml_parser_env 3 : 'binds) in
    let _7 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 127 "parser.mly"
    (
      let arg_types = List.map bind_to_typ _4 in
      let typ_pos = tok_span(3, 5) in
      let arr_typ = SForall([], TyArr(arg_types, TyBlank(typ_pos), typ_pos), typ_pos) in
      DFun(_2, _4, arr_typ, _7, full_span())
    )
# 1143 "parser.ml"
               : 'decl))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 7 : string) in
    let _4 = (Parsing.peek_val __caml_parser_env 5 : 'binds) in
    let _7 = (Parsing.peek_val __caml_parser_env 2 : 'typ) in
    let _9 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 134 "parser.mly"
    (
      let arg_types = List.map bind_to_typ _4 in
      let typ_pos = tok_span(3, 7) in
      DFun(_2, _4, SForall([], TyArr(arg_types, _7, typ_pos), typ_pos), _9, full_span())
    )
# 1157 "parser.ml"
               : 'decl))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 6 : string) in
    let _5 = (Parsing.peek_val __caml_parser_env 3 : 'namebindings_consts) in
    let _7 = (Parsing.peek_val __caml_parser_env 1 : 'inclass_decls) in
    Obj.repr(
# 139 "parser.mly"
                                                                        (DClass(_2, _5, _7, full_span()))
# 1166 "parser.ml"
               : 'decl))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 8 : string) in
    let _4 = (Parsing.peek_val __caml_parser_env 6 : string) in
    let _7 = (Parsing.peek_val __caml_parser_env 3 : 'namebindings_consts) in
    let _9 = (Parsing.peek_val __caml_parser_env 1 : 'inclass_decls) in
    Obj.repr(
# 140 "parser.mly"
                                                                                   (DClassE(_2, _7, _9, _4, full_span()))
# 1176 "parser.ml"
               : 'decl))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'namebind) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'const) in
    Obj.repr(
# 145 "parser.mly"
                         ( [(_1, _3, full_span())] )
# 1184 "parser.ml"
               : 'namebindings_consts))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 4 : 'namebind) in
    let _3 = (Parsing.peek_val __caml_parser_env 2 : 'const) in
    let _5 = (Parsing.peek_val __caml_parser_env 0 : 'namebindings_consts) in
    Obj.repr(
# 146 "parser.mly"
                                                   ( (_1, _3, tok_span(1, 3))::_5 )
# 1193 "parser.ml"
               : 'namebindings_consts))
; (fun __caml_parser_env ->
    Obj.repr(
# 150 "parser.mly"
    ( [] )
# 1199 "parser.ml"
               : 'tyids))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : string) in
    Obj.repr(
# 151 "parser.mly"
         ( [_1] )
# 1206 "parser.ml"
               : 'tyids))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : string) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'tyids) in
    Obj.repr(
# 152 "parser.mly"
                     ( _1::_3 )
# 1214 "parser.ml"
               : 'tyids))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : string) in
    Obj.repr(
# 154 "parser.mly"
            ( TyVar(_1, full_span()) )
# 1221 "parser.ml"
               : 'tyid))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'bind) in
    Obj.repr(
# 157 "parser.mly"
         ( [_1] )
# 1228 "parser.ml"
               : 'binds))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'bind) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'binds) in
    Obj.repr(
# 158 "parser.mly"
                     ( _1::_3 )
# 1236 "parser.ml"
               : 'binds))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'namebind) in
    Obj.repr(
# 161 "parser.mly"
             ( _1 )
# 1243 "parser.ml"
               : 'bind))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'blankbind) in
    Obj.repr(
# 162 "parser.mly"
              ( _1 )
# 1250 "parser.ml"
               : 'bind))
; (fun __caml_parser_env ->
    Obj.repr(
# 165 "parser.mly"
                          ( BBlank(TyBlank(full_span()), full_span()) )
# 1256 "parser.ml"
               : 'blankbind))
; (fun __caml_parser_env ->
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'typ) in
    Obj.repr(
# 166 "parser.mly"
                         ( BBlank(_3, full_span()) )
# 1263 "parser.ml"
               : 'blankbind))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : string) in
    Obj.repr(
# 169 "parser.mly"
                  ( BName(_1, TyBlank(full_span()), full_span()) )
# 1270 "parser.ml"
               : 'namebind))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : string) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'typ) in
    Obj.repr(
# 170 "parser.mly"
                 ( BName(_1, _3, full_span()) )
# 1278 "parser.ml"
               : 'namebind))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : string) in
    Obj.repr(
# 173 "parser.mly"
       ( TyCon(_1, full_span()) )
# 1285 "parser.ml"
               : 'typ))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'tyid) in
    Obj.repr(
# 174 "parser.mly"
         ( _1 )
# 1292 "parser.ml"
               : 'typ))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'arrowtyp) in
    Obj.repr(
# 175 "parser.mly"
             ( _1 )
# 1299 "parser.ml"
               : 'typ))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 3 : 'typs) in
    let _4 = (Parsing.peek_val __caml_parser_env 1 : 'typ) in
    Obj.repr(
# 178 "parser.mly"
                                            ( TyArr(_2, _4, full_span()) )
# 1307 "parser.ml"
               : 'arrowtyp))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 3 : 'typs) in
    let _4 = (Parsing.peek_val __caml_parser_env 1 : 'typ) in
    Obj.repr(
# 179 "parser.mly"
                                          ( TyArr(_2, _4, full_span()) )
# 1315 "parser.ml"
               : 'arrowtyp))
; (fun __caml_parser_env ->
    let _3 = (Parsing.peek_val __caml_parser_env 1 : 'typ) in
    Obj.repr(
# 180 "parser.mly"
                                       ( TyArr([], _3, full_span()) )
# 1322 "parser.ml"
               : 'arrowtyp))
; (fun __caml_parser_env ->
    let _3 = (Parsing.peek_val __caml_parser_env 1 : 'typ) in
    Obj.repr(
# 181 "parser.mly"
                                     ( TyArr([], _3, full_span()) )
# 1329 "parser.ml"
               : 'arrowtyp))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'typ) in
    Obj.repr(
# 185 "parser.mly"
        ( [_1] )
# 1336 "parser.ml"
               : 'typs))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'typ) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'typs) in
    Obj.repr(
# 186 "parser.mly"
                   ( _1::_3 )
# 1344 "parser.ml"
               : 'typs))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'typ) in
    Obj.repr(
# 189 "parser.mly"
        ( [_1] )
# 1351 "parser.ml"
               : 'startyps))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'typ) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'startyps) in
    Obj.repr(
# 190 "parser.mly"
                       ( _1::_3 )
# 1359 "parser.ml"
               : 'startyps))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'decl) in
    Obj.repr(
# 193 "parser.mly"
         ( [_1] )
# 1366 "parser.ml"
               : 'declgroup))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'decl) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'declgroup) in
    Obj.repr(
# 194 "parser.mly"
                          ( _1::_3 )
# 1374 "parser.ml"
               : 'declgroup))
; (fun __caml_parser_env ->
    Obj.repr(
# 197 "parser.mly"
    ( [] )
# 1380 "parser.ml"
               : 'decls))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'declgroup) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'decls) in
    Obj.repr(
# 198 "parser.mly"
                    ( _1::_2 )
# 1388 "parser.ml"
               : 'decls))
; (fun __caml_parser_env ->
    Obj.repr(
# 201 "parser.mly"
    ( [] )
# 1394 "parser.ml"
               : 'inclass_decls))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'decl) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'inclass_decls) in
    Obj.repr(
# 202 "parser.mly"
                       ( _1::_2 )
# 1402 "parser.ml"
               : 'inclass_decls))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 4 : string) in
    let _5 = (Parsing.peek_val __caml_parser_env 1 : 'startyps) in
    Obj.repr(
# 205 "parser.mly"
                                                ( TyDecl(_2, _5, full_span()) )
# 1410 "parser.ml"
               : 'tydecl))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 4 : string) in
    let _5 = (Parsing.peek_val __caml_parser_env 1 : 'startyps) in
    Obj.repr(
# 206 "parser.mly"
                                              ( TyDecl(_2, _5, full_span()) )
# 1418 "parser.ml"
               : 'tydecl))
; (fun __caml_parser_env ->
    Obj.repr(
# 209 "parser.mly"
    ( [] )
# 1424 "parser.ml"
               : 'tydecls))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'tydecl) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'tydecls) in
    Obj.repr(
# 210 "parser.mly"
                   ( _1 :: _2 )
# 1432 "parser.ml"
               : 'tydecls))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 5 : 'tydecls) in
    let _2 = (Parsing.peek_val __caml_parser_env 4 : 'decls) in
    let _3 = (Parsing.peek_val __caml_parser_env 3 : 'expr) in
    let _5 = (Parsing.peek_val __caml_parser_env 1 : 'typ) in
    Obj.repr(
# 213 "parser.mly"
                                     ( Program(_1, _2, EAnnot(_3, _5, tok_span(3, 5)), full_span()) )
# 1442 "parser.ml"
               : (Lexing.position * Lexing.position) Exprs.program))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 3 : 'tydecls) in
    let _2 = (Parsing.peek_val __caml_parser_env 2 : 'decls) in
    let _3 = (Parsing.peek_val __caml_parser_env 1 : 'expr) in
    Obj.repr(
# 214 "parser.mly"
                           ( Program(_1, _2, _3, full_span()) )
# 1451 "parser.ml"
               : (Lexing.position * Lexing.position) Exprs.program))
(* Entry program *)
; (fun __caml_parser_env -> raise (Parsing.YYexit (Parsing.peek_val __caml_parser_env 0)))
|]
let yytables =
  { Parsing.actions=yyact;
    Parsing.transl_const=yytransl_const;
    Parsing.transl_block=yytransl_block;
    Parsing.lhs=yylhs;
    Parsing.len=yylen;
    Parsing.defred=yydefred;
    Parsing.dgoto=yydgoto;
    Parsing.sindex=yysindex;
    Parsing.rindex=yyrindex;
    Parsing.gindex=yygindex;
    Parsing.tablesize=yytablesize;
    Parsing.table=yytable;
    Parsing.check=yycheck;
    Parsing.error_function=parse_error;
    Parsing.names_const=yynames_const;
    Parsing.names_block=yynames_block }
let program (lexfun : Lexing.lexbuf -> token) (lexbuf : Lexing.lexbuf) =
   (Parsing.yyparse yytables 1 lexfun lexbuf : (Lexing.position * Lexing.position) Exprs.program)
;;
