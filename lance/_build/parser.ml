type token =
  | NUM of (int)
  | ID of (string)
  | TYID of (string)
  | DEF
  | ANDDEF
  | ADD1
  | SUB1
  | LPARENSPACE
  | LPARENNOSPACE
  | RPAREN
  | LBRACK
  | RBRACK
  | LBRACE
  | RBRACE
  | LET
  | IN
  | OF
  | EQUAL
  | COMMA
  | PLUS
  | MINUS
  | TIMES
  | IF
  | COLON
  | ELSECOLON
  | EOF
  | PRINT
  | PRINTSTACK
  | TRUE
  | FALSE
  | ISBOOL
  | ISNUM
  | ISTUPLE
  | EQEQ
  | LESSSPACE
  | LESSNOSPACE
  | GREATER
  | LESSEQ
  | GREATEREQ
  | AND
  | OR
  | NOT
  | THINARROW
  | COLONEQ
  | SEMI
  | NIL
  | TYPE
  | LAMBDA
  | BEGIN
  | END
  | REC

open Parsing;;
let _ = parse_error;;
# 2 "parser.mly"
open Exprs

let make_namebind(name, typ, loc) =
  if name = "_" then BBlank(typ, loc) else BName(name, typ, loc)
# 62 "parser.ml"
let yytransl_const = [|
  260 (* DEF *);
  261 (* ANDDEF *);
  262 (* ADD1 *);
  263 (* SUB1 *);
  264 (* LPARENSPACE *);
  265 (* LPARENNOSPACE *);
  266 (* RPAREN *);
  267 (* LBRACK *);
  268 (* RBRACK *);
  269 (* LBRACE *);
  270 (* RBRACE *);
  271 (* LET *);
  272 (* IN *);
  273 (* OF *);
  274 (* EQUAL *);
  275 (* COMMA *);
  276 (* PLUS *);
  277 (* MINUS *);
  278 (* TIMES *);
  279 (* IF *);
  280 (* COLON *);
  281 (* ELSECOLON *);
    0 (* EOF *);
  282 (* PRINT *);
  283 (* PRINTSTACK *);
  284 (* TRUE *);
  285 (* FALSE *);
  286 (* ISBOOL *);
  287 (* ISNUM *);
  288 (* ISTUPLE *);
  289 (* EQEQ *);
  290 (* LESSSPACE *);
  291 (* LESSNOSPACE *);
  292 (* GREATER *);
  293 (* LESSEQ *);
  294 (* GREATEREQ *);
  295 (* AND *);
  296 (* OR *);
  297 (* NOT *);
  298 (* THINARROW *);
  299 (* COLONEQ *);
  300 (* SEMI *);
  301 (* NIL *);
  302 (* TYPE *);
  303 (* LAMBDA *);
  304 (* BEGIN *);
  305 (* END *);
  306 (* REC *);
    0|]

let yytransl_block = [|
  257 (* NUM *);
  258 (* ID *);
  259 (* TYID *);
    0|]

let yylhs = "\255\255\
\002\000\002\000\002\000\002\000\004\000\004\000\004\000\004\000\
\004\000\004\000\004\000\004\000\005\000\005\000\008\000\008\000\
\007\000\007\000\007\000\007\000\007\000\007\000\011\000\011\000\
\012\000\012\000\012\000\012\000\012\000\012\000\013\000\013\000\
\015\000\015\000\015\000\016\000\016\000\016\000\016\000\016\000\
\016\000\016\000\016\000\016\000\016\000\016\000\016\000\016\000\
\016\000\016\000\016\000\014\000\014\000\014\000\010\000\010\000\
\010\000\010\000\010\000\010\000\010\000\010\000\010\000\010\000\
\010\000\010\000\018\000\018\000\018\000\018\000\018\000\019\000\
\019\000\019\000\020\000\017\000\017\000\006\000\006\000\006\000\
\021\000\021\000\009\000\009\000\003\000\003\000\003\000\003\000\
\022\000\022\000\023\000\023\000\024\000\024\000\025\000\025\000\
\026\000\026\000\027\000\027\000\028\000\028\000\029\000\029\000\
\001\000\001\000\000\000"

let yylen = "\002\000\
\001\000\001\000\001\000\003\000\001\000\001\000\001\000\001\000\
\001\000\001\000\001\000\001\000\003\000\005\000\003\000\005\000\
\004\000\005\000\006\000\003\000\003\000\001\000\001\000\003\000\
\002\000\002\000\004\000\004\000\005\000\005\000\006\000\006\000\
\008\000\008\000\008\000\004\000\001\000\001\000\001\000\003\000\
\003\000\008\000\008\000\005\000\008\000\008\000\005\000\004\000\
\003\000\001\000\001\000\001\000\005\000\005\000\003\000\003\000\
\003\000\003\000\003\000\003\000\003\000\003\000\003\000\003\000\
\003\000\001\000\006\000\008\000\012\000\007\000\009\000\000\000\
\001\000\003\000\001\000\001\000\003\000\001\000\003\000\003\000\
\001\000\003\000\001\000\003\000\001\000\001\000\001\000\001\000\
\005\000\005\000\003\000\003\000\001\000\003\000\001\000\003\000\
\001\000\003\000\000\000\002\000\006\000\006\000\000\000\002\000\
\006\000\004\000\002\000"

let yydefred = "\000\000\
\000\000\000\000\000\000\107\000\000\000\000\000\000\000\104\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\100\000\
\001\000\052\000\005\000\006\000\000\000\000\000\000\000\000\000\
\008\000\012\000\002\000\003\000\009\000\010\000\011\000\007\000\
\000\000\000\000\050\000\000\000\000\000\000\000\037\000\000\000\
\000\000\000\000\066\000\000\000\000\000\000\000\000\000\098\000\
\000\000\026\000\000\000\000\000\000\000\025\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\078\000\000\000\
\000\000\000\000\000\000\000\000\106\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\085\000\075\000\000\000\
\000\000\000\000\086\000\087\000\088\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\040\000\000\000\000\000\000\000\000\000\000\000\041\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\004\000\020\000\000\000\000\000\049\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\021\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\102\000\101\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\028\000\000\000\000\000\000\000\000\000\000\000\027\000\000\000\
\084\000\080\000\079\000\000\000\000\000\017\000\000\000\000\000\
\036\000\105\000\000\000\048\000\000\000\000\000\000\000\000\000\
\000\000\092\000\000\000\091\000\096\000\067\000\000\000\077\000\
\000\000\000\000\074\000\000\000\054\000\000\000\000\000\047\000\
\030\000\053\000\000\000\000\000\044\000\029\000\018\000\000\000\
\000\000\000\000\024\000\000\000\000\000\000\000\000\000\094\000\
\000\000\000\000\000\000\070\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\014\000\019\000\032\000\000\000\031\000\
\000\000\000\000\090\000\089\000\068\000\000\000\000\000\000\000\
\000\000\000\000\000\000\016\000\000\000\000\000\000\000\071\000\
\000\000\046\000\045\000\043\000\042\000\034\000\033\000\035\000\
\000\000\000\000\069\000"

let yydgoto = "\002\000\
\004\000\035\000\090\000\036\000\061\000\097\000\126\000\116\000\
\063\000\038\000\127\000\039\000\040\000\041\000\042\000\043\000\
\098\000\010\000\100\000\091\000\000\000\092\000\093\000\144\000\
\094\000\011\000\012\000\005\000\006\000"

let yysindex = "\018\000\
\250\254\000\000\053\255\000\000\250\254\062\255\058\255\000\000\
\068\255\072\255\062\255\245\003\060\255\019\255\062\255\000\000\
\000\000\000\000\000\000\000\000\127\255\228\002\013\255\245\003\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\056\255\245\003\000\000\073\255\020\000\168\255\000\000\070\255\
\075\255\077\255\000\000\076\255\076\255\065\255\084\255\000\000\
\067\255\000\000\022\255\015\255\069\255\000\000\024\255\052\255\
\071\255\034\255\034\255\087\255\080\255\074\255\000\000\081\255\
\076\255\048\255\245\003\076\255\000\000\020\003\079\004\079\004\
\079\004\079\004\079\004\079\004\079\004\079\004\079\004\079\004\
\079\004\245\003\097\255\100\255\103\255\000\000\000\000\076\255\
\076\255\085\255\000\000\000\000\000\000\096\255\101\255\255\254\
\093\255\104\255\094\255\079\255\076\255\034\255\034\255\245\003\
\000\000\065\003\076\255\034\255\034\255\245\003\000\000\110\003\
\076\255\106\255\107\255\102\255\108\255\245\003\245\003\245\003\
\000\000\000\000\109\255\121\000\000\000\105\255\117\255\121\255\
\121\255\121\255\121\255\121\255\121\255\121\255\121\255\121\255\
\121\255\121\255\000\000\114\255\122\255\123\255\016\255\110\255\
\128\255\118\255\133\255\076\255\000\000\000\000\245\003\076\255\
\034\255\005\255\084\255\135\255\137\255\139\255\141\255\151\255\
\000\000\154\255\155\255\156\255\157\255\159\255\000\000\163\255\
\000\000\000\000\000\000\245\003\245\003\000\000\126\255\145\255\
\000\000\000\000\245\003\000\000\175\255\177\255\178\255\076\255\
\076\255\000\000\076\255\000\000\000\000\000\000\158\255\000\000\
\245\003\076\255\000\000\034\255\000\000\161\255\167\255\000\000\
\000\000\000\000\169\255\170\255\000\000\000\000\000\000\162\255\
\034\255\245\003\000\000\001\255\006\255\149\255\165\255\000\000\
\185\255\186\255\245\003\000\000\187\255\188\255\245\003\245\003\
\245\003\245\003\087\255\000\000\000\000\000\000\245\003\000\000\
\245\003\245\003\000\000\000\000\000\000\245\003\138\255\189\255\
\207\255\208\255\209\255\000\000\198\255\210\255\217\255\000\000\
\076\255\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\196\255\245\003\000\000"

let yyrindex = "\000\000\
\155\003\000\000\000\000\000\000\155\003\034\004\000\000\000\000\
\000\000\200\003\034\004\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\183\002\000\000\001\000\
\050\000\099\000\000\000\000\000\000\000\000\000\195\255\000\000\
\216\255\000\000\000\000\000\000\216\255\000\000\000\000\000\000\
\046\255\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\220\255\000\000\000\000\000\000\000\000\000\000\000\000\
\222\255\000\000\197\255\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\224\255\000\000\148\000\
\197\000\246\000\043\001\092\001\141\001\190\001\239\001\032\002\
\085\002\134\002\000\000\000\000\000\000\000\000\251\254\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\195\255\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\223\255\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\225\255\
\000\000\000\000\000\000\000\000\000\000\000\000\201\255\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000"

let yygindex = "\000\000\
\000\000\000\000\194\255\000\000\031\000\233\255\246\255\015\000\
\200\255\018\005\160\255\000\000\000\000\000\000\000\000\000\000\
\206\255\000\000\089\000\000\000\000\000\000\000\000\000\174\255\
\228\255\230\000\236\000\000\000\252\000"

let yytablesize = 1404
let yytable = "\062\000\
\038\000\037\000\121\000\117\000\095\000\124\000\146\000\114\000\
\115\000\162\000\052\000\056\000\230\000\064\000\057\000\168\000\
\095\000\232\000\001\000\069\000\058\000\059\000\151\000\066\000\
\105\000\143\000\143\000\046\000\193\000\102\000\103\000\108\000\
\109\000\106\000\184\000\057\000\093\000\148\000\157\000\003\000\
\152\000\058\000\059\000\231\000\163\000\104\000\194\000\110\000\
\233\000\051\000\169\000\158\000\159\000\047\000\007\000\083\000\
\123\000\164\000\165\000\145\000\147\000\111\000\060\000\083\000\
\083\000\009\000\057\000\044\000\045\000\014\000\112\000\139\000\
\058\000\059\000\096\000\013\000\015\000\086\000\087\000\065\000\
\083\000\067\000\211\000\088\000\089\000\084\000\099\000\085\000\
\057\000\191\000\101\000\119\000\107\000\160\000\113\000\118\000\
\122\000\140\000\039\000\166\000\141\000\216\000\192\000\142\000\
\120\000\149\000\148\000\174\000\175\000\176\000\150\000\153\000\
\155\000\154\000\156\000\170\000\171\000\172\000\177\000\189\000\
\178\000\215\000\217\000\179\000\218\000\173\000\180\000\017\000\
\049\000\070\000\181\000\221\000\019\000\020\000\021\000\022\000\
\050\000\186\000\182\000\183\000\190\000\023\000\188\000\196\000\
\209\000\222\000\197\000\055\000\198\000\024\000\199\000\185\000\
\025\000\026\000\027\000\028\000\029\000\030\000\031\000\187\000\
\200\000\207\000\208\000\201\000\202\000\203\000\204\000\032\000\
\205\000\210\000\117\000\033\000\206\000\051\000\034\000\212\000\
\070\000\213\000\214\000\249\000\227\000\219\000\220\000\184\000\
\223\000\062\000\001\001\071\000\072\000\073\000\224\000\234\000\
\225\000\226\000\235\000\236\000\056\000\239\000\250\000\229\000\
\074\000\075\000\076\000\077\000\078\000\079\000\080\000\081\000\
\237\000\254\000\238\000\082\000\240\000\241\000\242\000\243\000\
\251\000\252\000\253\000\002\001\245\000\255\000\246\000\247\000\
\052\000\052\000\052\000\248\000\000\001\095\000\072\000\076\000\
\073\000\023\000\052\000\052\000\052\000\052\000\013\000\228\000\
\015\000\244\000\093\000\195\000\048\000\057\000\016\000\003\001\
\052\000\052\000\052\000\052\000\052\000\052\000\052\000\052\000\
\008\000\038\000\038\000\052\000\038\000\038\000\038\000\038\000\
\038\000\038\000\038\000\000\000\038\000\000\000\000\000\038\000\
\038\000\000\000\000\000\038\000\038\000\038\000\038\000\038\000\
\038\000\038\000\038\000\038\000\038\000\038\000\038\000\038\000\
\038\000\038\000\038\000\038\000\038\000\038\000\038\000\038\000\
\038\000\038\000\065\000\068\000\038\000\038\000\000\000\000\000\
\038\000\038\000\051\000\051\000\000\000\051\000\051\000\051\000\
\051\000\051\000\051\000\051\000\000\000\051\000\000\000\000\000\
\051\000\051\000\000\000\000\000\051\000\051\000\051\000\051\000\
\051\000\051\000\051\000\051\000\051\000\051\000\051\000\051\000\
\051\000\051\000\051\000\051\000\051\000\051\000\051\000\051\000\
\051\000\051\000\051\000\062\000\000\000\051\000\051\000\000\000\
\000\000\051\000\051\000\039\000\039\000\000\000\039\000\039\000\
\039\000\039\000\039\000\039\000\039\000\000\000\039\000\000\000\
\000\000\039\000\039\000\000\000\000\000\039\000\039\000\039\000\
\039\000\039\000\039\000\039\000\039\000\039\000\039\000\039\000\
\039\000\039\000\039\000\039\000\039\000\039\000\039\000\039\000\
\039\000\039\000\039\000\039\000\063\000\000\000\039\000\039\000\
\000\000\000\000\039\000\039\000\055\000\055\000\000\000\055\000\
\055\000\055\000\055\000\055\000\000\000\055\000\000\000\055\000\
\000\000\000\000\055\000\055\000\000\000\000\000\055\000\055\000\
\055\000\055\000\055\000\055\000\055\000\055\000\055\000\055\000\
\055\000\055\000\055\000\055\000\055\000\055\000\055\000\055\000\
\055\000\055\000\055\000\055\000\055\000\060\000\000\000\055\000\
\055\000\000\000\000\000\055\000\055\000\056\000\056\000\000\000\
\056\000\056\000\056\000\056\000\056\000\000\000\056\000\000\000\
\056\000\000\000\000\000\056\000\056\000\000\000\000\000\056\000\
\056\000\056\000\056\000\056\000\056\000\056\000\056\000\056\000\
\056\000\056\000\056\000\056\000\056\000\056\000\056\000\056\000\
\056\000\056\000\056\000\056\000\056\000\056\000\064\000\000\000\
\056\000\056\000\000\000\000\000\056\000\056\000\057\000\057\000\
\000\000\057\000\057\000\057\000\057\000\057\000\000\000\057\000\
\000\000\057\000\000\000\000\000\057\000\057\000\000\000\000\000\
\057\000\057\000\057\000\057\000\057\000\057\000\057\000\057\000\
\057\000\057\000\057\000\057\000\057\000\057\000\057\000\057\000\
\057\000\057\000\057\000\057\000\057\000\057\000\057\000\061\000\
\000\000\057\000\057\000\000\000\000\000\057\000\057\000\000\000\
\000\000\000\000\000\000\065\000\065\000\000\000\065\000\065\000\
\065\000\065\000\065\000\000\000\065\000\000\000\065\000\000\000\
\000\000\065\000\065\000\000\000\000\000\065\000\065\000\065\000\
\065\000\065\000\065\000\065\000\065\000\065\000\065\000\065\000\
\065\000\065\000\065\000\065\000\065\000\065\000\065\000\065\000\
\065\000\065\000\065\000\065\000\058\000\000\000\065\000\065\000\
\000\000\000\000\065\000\065\000\062\000\062\000\000\000\062\000\
\062\000\062\000\062\000\062\000\000\000\062\000\000\000\062\000\
\000\000\000\000\062\000\062\000\000\000\000\000\062\000\062\000\
\062\000\062\000\062\000\062\000\062\000\062\000\062\000\062\000\
\062\000\062\000\062\000\062\000\062\000\062\000\062\000\062\000\
\062\000\062\000\062\000\062\000\062\000\059\000\000\000\062\000\
\062\000\000\000\000\000\062\000\062\000\063\000\063\000\000\000\
\063\000\063\000\063\000\063\000\063\000\000\000\063\000\000\000\
\063\000\000\000\000\000\063\000\063\000\000\000\000\000\063\000\
\063\000\063\000\063\000\063\000\063\000\063\000\063\000\063\000\
\063\000\063\000\063\000\063\000\063\000\063\000\063\000\063\000\
\063\000\063\000\063\000\063\000\063\000\063\000\022\000\000\000\
\063\000\063\000\000\000\000\000\063\000\063\000\060\000\060\000\
\000\000\060\000\060\000\060\000\060\000\060\000\000\000\060\000\
\000\000\060\000\000\000\000\000\060\000\060\000\000\000\000\000\
\060\000\060\000\060\000\060\000\060\000\060\000\060\000\060\000\
\060\000\060\000\060\000\060\000\060\000\060\000\060\000\060\000\
\060\000\060\000\060\000\060\000\060\000\060\000\060\000\000\000\
\000\000\060\000\060\000\000\000\000\000\060\000\060\000\064\000\
\064\000\000\000\064\000\064\000\064\000\064\000\064\000\000\000\
\064\000\000\000\064\000\000\000\000\000\064\000\064\000\000\000\
\000\000\064\000\064\000\064\000\064\000\064\000\064\000\064\000\
\064\000\064\000\064\000\064\000\064\000\064\000\064\000\064\000\
\064\000\064\000\064\000\064\000\064\000\064\000\064\000\064\000\
\000\000\000\000\064\000\064\000\000\000\000\000\064\000\064\000\
\061\000\061\000\000\000\061\000\061\000\061\000\061\000\061\000\
\000\000\061\000\000\000\061\000\000\000\000\000\061\000\061\000\
\000\000\000\000\061\000\061\000\061\000\061\000\061\000\061\000\
\061\000\061\000\061\000\061\000\061\000\061\000\061\000\061\000\
\061\000\061\000\061\000\061\000\061\000\061\000\061\000\061\000\
\061\000\000\000\000\000\061\000\061\000\000\000\000\000\061\000\
\061\000\000\000\000\000\000\000\000\000\058\000\058\000\000\000\
\058\000\058\000\058\000\058\000\058\000\000\000\058\000\000\000\
\058\000\000\000\000\000\058\000\058\000\000\000\000\000\058\000\
\058\000\058\000\058\000\058\000\058\000\058\000\058\000\058\000\
\058\000\058\000\058\000\058\000\058\000\058\000\058\000\058\000\
\058\000\058\000\058\000\058\000\058\000\058\000\000\000\000\000\
\058\000\058\000\000\000\000\000\058\000\058\000\059\000\059\000\
\000\000\059\000\059\000\059\000\059\000\059\000\000\000\059\000\
\000\000\059\000\000\000\000\000\059\000\059\000\000\000\000\000\
\059\000\059\000\059\000\059\000\059\000\059\000\059\000\059\000\
\059\000\059\000\059\000\059\000\059\000\059\000\059\000\059\000\
\059\000\059\000\059\000\059\000\059\000\059\000\059\000\000\000\
\000\000\059\000\059\000\000\000\000\000\059\000\059\000\022\000\
\022\000\000\000\022\000\022\000\022\000\022\000\022\000\000\000\
\022\000\000\000\022\000\000\000\000\000\022\000\022\000\000\000\
\000\000\022\000\000\000\000\000\000\000\022\000\022\000\022\000\
\022\000\022\000\022\000\022\000\022\000\022\000\022\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\022\000\
\000\000\000\000\000\000\022\000\017\000\053\000\022\000\022\000\
\000\000\019\000\020\000\021\000\022\000\054\000\000\000\000\000\
\000\000\000\000\023\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\024\000\000\000\000\000\025\000\026\000\027\000\
\028\000\029\000\030\000\031\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\032\000\000\000\000\000\000\000\
\033\000\000\000\055\000\034\000\017\000\018\000\000\000\000\000\
\000\000\019\000\020\000\021\000\022\000\125\000\000\000\000\000\
\000\000\000\000\023\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\024\000\000\000\000\000\025\000\026\000\027\000\
\028\000\029\000\030\000\031\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\032\000\000\000\000\000\000\000\
\033\000\017\000\018\000\034\000\000\000\000\000\019\000\020\000\
\021\000\022\000\161\000\000\000\000\000\000\000\000\000\023\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\024\000\
\000\000\000\000\025\000\026\000\027\000\028\000\029\000\030\000\
\031\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\032\000\000\000\000\000\000\000\033\000\017\000\018\000\
\034\000\000\000\000\000\019\000\020\000\021\000\022\000\167\000\
\000\000\000\000\000\000\000\000\023\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\024\000\000\000\000\000\025\000\
\026\000\027\000\028\000\029\000\030\000\031\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\032\000\000\000\
\000\000\000\000\033\000\103\000\103\000\034\000\103\000\000\000\
\103\000\103\000\103\000\103\000\000\000\000\000\000\000\000\000\
\000\000\103\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\103\000\000\000\000\000\103\000\103\000\103\000\103\000\
\103\000\103\000\103\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\103\000\000\000\000\000\000\000\103\000\
\097\000\097\000\103\000\097\000\000\000\097\000\097\000\097\000\
\097\000\000\000\000\000\000\000\000\000\000\000\097\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\097\000\000\000\
\000\000\097\000\097\000\097\000\097\000\097\000\097\000\097\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\097\000\000\000\000\000\000\000\097\000\017\000\018\000\097\000\
\000\000\000\000\019\000\020\000\021\000\022\000\000\000\000\000\
\000\000\000\000\000\000\023\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\024\000\000\000\000\000\025\000\026\000\
\027\000\028\000\029\000\030\000\031\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\032\000\000\000\000\000\
\000\000\033\000\099\000\099\000\034\000\000\000\000\000\099\000\
\099\000\099\000\099\000\000\000\000\000\000\000\000\000\000\000\
\099\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\099\000\000\000\000\000\099\000\099\000\099\000\099\000\099\000\
\099\000\099\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\099\000\000\000\000\000\000\000\099\000\017\000\
\018\000\099\000\000\000\000\000\019\000\020\000\021\000\022\000\
\128\000\129\000\130\000\131\000\132\000\133\000\134\000\135\000\
\136\000\137\000\138\000\000\000\000\000\000\000\000\000\000\000\
\025\000\026\000\027\000\028\000\029\000\030\000\031\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\032\000\
\000\000\000\000\000\000\033\000"

let yycheck = "\023\000\
\000\000\012\000\065\000\060\000\010\001\068\000\089\000\058\000\
\059\000\106\000\021\000\022\000\012\001\024\000\002\001\112\000\
\045\000\012\001\001\000\000\000\008\001\009\001\024\001\034\000\
\010\001\088\000\089\000\009\001\024\001\008\001\009\001\008\001\
\009\001\019\001\019\001\002\001\042\001\022\001\101\000\046\001\
\042\001\008\001\009\001\043\001\107\000\024\001\042\001\024\001\
\043\001\000\000\113\000\102\000\103\000\035\001\002\001\010\001\
\067\000\108\000\109\000\088\000\089\000\010\001\050\001\018\001\
\019\001\004\001\002\001\008\001\009\001\002\001\019\001\082\000\
\008\001\009\001\010\001\018\001\005\001\002\001\003\001\024\001\
\011\001\009\001\179\000\008\001\009\001\011\001\003\001\011\001\
\002\001\152\000\024\001\018\001\024\001\104\000\024\001\016\001\
\049\001\001\001\000\000\110\000\001\001\184\000\153\000\001\001\
\024\001\010\001\022\001\118\000\119\000\120\000\010\001\019\001\
\019\001\010\001\036\001\010\001\010\001\016\001\010\001\148\000\
\000\000\184\000\185\000\019\001\187\000\018\001\010\001\001\001\
\002\001\009\001\017\001\194\000\006\001\007\001\008\001\009\001\
\010\001\010\001\017\001\017\001\151\000\015\001\010\001\009\001\
\019\001\196\000\010\001\000\000\010\001\023\001\010\001\042\001\
\026\001\027\001\028\001\029\001\030\001\031\001\032\001\042\001\
\010\001\172\000\173\000\010\001\010\001\010\001\010\001\041\001\
\010\001\025\001\227\000\045\001\010\001\047\001\048\001\001\001\
\009\001\001\001\001\001\042\001\019\001\024\001\193\000\019\001\
\024\001\209\000\249\000\020\001\021\001\022\001\024\001\043\001\
\024\001\024\001\010\001\010\001\000\000\010\001\010\001\210\000\
\033\001\034\001\035\001\036\001\037\001\038\001\039\001\040\001\
\219\000\012\001\024\001\044\001\223\000\224\000\225\000\226\000\
\010\001\010\001\010\001\024\001\231\000\012\001\233\000\234\000\
\009\001\010\001\011\001\238\000\012\001\010\001\036\001\010\001\
\036\001\010\001\019\001\020\001\021\001\022\001\016\001\209\000\
\016\001\227\000\042\001\155\000\015\000\000\000\011\000\002\001\
\033\001\034\001\035\001\036\001\037\001\038\001\039\001\040\001\
\005\000\001\001\002\001\044\001\004\001\005\001\006\001\007\001\
\008\001\009\001\010\001\255\255\012\001\255\255\255\255\015\001\
\016\001\255\255\255\255\019\001\020\001\021\001\022\001\023\001\
\024\001\025\001\026\001\027\001\028\001\029\001\030\001\031\001\
\032\001\033\001\034\001\035\001\036\001\037\001\038\001\039\001\
\040\001\041\001\000\000\024\001\044\001\045\001\255\255\255\255\
\048\001\049\001\001\001\002\001\255\255\004\001\005\001\006\001\
\007\001\008\001\009\001\010\001\255\255\012\001\255\255\255\255\
\015\001\016\001\255\255\255\255\019\001\020\001\021\001\022\001\
\023\001\024\001\025\001\026\001\027\001\028\001\029\001\030\001\
\031\001\032\001\033\001\034\001\035\001\036\001\037\001\038\001\
\039\001\040\001\041\001\000\000\255\255\044\001\045\001\255\255\
\255\255\048\001\049\001\001\001\002\001\255\255\004\001\005\001\
\006\001\007\001\008\001\009\001\010\001\255\255\012\001\255\255\
\255\255\015\001\016\001\255\255\255\255\019\001\020\001\021\001\
\022\001\023\001\024\001\025\001\026\001\027\001\028\001\029\001\
\030\001\031\001\032\001\033\001\034\001\035\001\036\001\037\001\
\038\001\039\001\040\001\041\001\000\000\255\255\044\001\045\001\
\255\255\255\255\048\001\049\001\001\001\002\001\255\255\004\001\
\005\001\006\001\007\001\008\001\255\255\010\001\255\255\012\001\
\255\255\255\255\015\001\016\001\255\255\255\255\019\001\020\001\
\021\001\022\001\023\001\024\001\025\001\026\001\027\001\028\001\
\029\001\030\001\031\001\032\001\033\001\034\001\035\001\036\001\
\037\001\038\001\039\001\040\001\041\001\000\000\255\255\044\001\
\045\001\255\255\255\255\048\001\049\001\001\001\002\001\255\255\
\004\001\005\001\006\001\007\001\008\001\255\255\010\001\255\255\
\012\001\255\255\255\255\015\001\016\001\255\255\255\255\019\001\
\020\001\021\001\022\001\023\001\024\001\025\001\026\001\027\001\
\028\001\029\001\030\001\031\001\032\001\033\001\034\001\035\001\
\036\001\037\001\038\001\039\001\040\001\041\001\000\000\255\255\
\044\001\045\001\255\255\255\255\048\001\049\001\001\001\002\001\
\255\255\004\001\005\001\006\001\007\001\008\001\255\255\010\001\
\255\255\012\001\255\255\255\255\015\001\016\001\255\255\255\255\
\019\001\020\001\021\001\022\001\023\001\024\001\025\001\026\001\
\027\001\028\001\029\001\030\001\031\001\032\001\033\001\034\001\
\035\001\036\001\037\001\038\001\039\001\040\001\041\001\000\000\
\255\255\044\001\045\001\255\255\255\255\048\001\049\001\255\255\
\255\255\255\255\255\255\001\001\002\001\255\255\004\001\005\001\
\006\001\007\001\008\001\255\255\010\001\255\255\012\001\255\255\
\255\255\015\001\016\001\255\255\255\255\019\001\020\001\021\001\
\022\001\023\001\024\001\025\001\026\001\027\001\028\001\029\001\
\030\001\031\001\032\001\033\001\034\001\035\001\036\001\037\001\
\038\001\039\001\040\001\041\001\000\000\255\255\044\001\045\001\
\255\255\255\255\048\001\049\001\001\001\002\001\255\255\004\001\
\005\001\006\001\007\001\008\001\255\255\010\001\255\255\012\001\
\255\255\255\255\015\001\016\001\255\255\255\255\019\001\020\001\
\021\001\022\001\023\001\024\001\025\001\026\001\027\001\028\001\
\029\001\030\001\031\001\032\001\033\001\034\001\035\001\036\001\
\037\001\038\001\039\001\040\001\041\001\000\000\255\255\044\001\
\045\001\255\255\255\255\048\001\049\001\001\001\002\001\255\255\
\004\001\005\001\006\001\007\001\008\001\255\255\010\001\255\255\
\012\001\255\255\255\255\015\001\016\001\255\255\255\255\019\001\
\020\001\021\001\022\001\023\001\024\001\025\001\026\001\027\001\
\028\001\029\001\030\001\031\001\032\001\033\001\034\001\035\001\
\036\001\037\001\038\001\039\001\040\001\041\001\000\000\255\255\
\044\001\045\001\255\255\255\255\048\001\049\001\001\001\002\001\
\255\255\004\001\005\001\006\001\007\001\008\001\255\255\010\001\
\255\255\012\001\255\255\255\255\015\001\016\001\255\255\255\255\
\019\001\020\001\021\001\022\001\023\001\024\001\025\001\026\001\
\027\001\028\001\029\001\030\001\031\001\032\001\033\001\034\001\
\035\001\036\001\037\001\038\001\039\001\040\001\041\001\255\255\
\255\255\044\001\045\001\255\255\255\255\048\001\049\001\001\001\
\002\001\255\255\004\001\005\001\006\001\007\001\008\001\255\255\
\010\001\255\255\012\001\255\255\255\255\015\001\016\001\255\255\
\255\255\019\001\020\001\021\001\022\001\023\001\024\001\025\001\
\026\001\027\001\028\001\029\001\030\001\031\001\032\001\033\001\
\034\001\035\001\036\001\037\001\038\001\039\001\040\001\041\001\
\255\255\255\255\044\001\045\001\255\255\255\255\048\001\049\001\
\001\001\002\001\255\255\004\001\005\001\006\001\007\001\008\001\
\255\255\010\001\255\255\012\001\255\255\255\255\015\001\016\001\
\255\255\255\255\019\001\020\001\021\001\022\001\023\001\024\001\
\025\001\026\001\027\001\028\001\029\001\030\001\031\001\032\001\
\033\001\034\001\035\001\036\001\037\001\038\001\039\001\040\001\
\041\001\255\255\255\255\044\001\045\001\255\255\255\255\048\001\
\049\001\255\255\255\255\255\255\255\255\001\001\002\001\255\255\
\004\001\005\001\006\001\007\001\008\001\255\255\010\001\255\255\
\012\001\255\255\255\255\015\001\016\001\255\255\255\255\019\001\
\020\001\021\001\022\001\023\001\024\001\025\001\026\001\027\001\
\028\001\029\001\030\001\031\001\032\001\033\001\034\001\035\001\
\036\001\037\001\038\001\039\001\040\001\041\001\255\255\255\255\
\044\001\045\001\255\255\255\255\048\001\049\001\001\001\002\001\
\255\255\004\001\005\001\006\001\007\001\008\001\255\255\010\001\
\255\255\012\001\255\255\255\255\015\001\016\001\255\255\255\255\
\019\001\020\001\021\001\022\001\023\001\024\001\025\001\026\001\
\027\001\028\001\029\001\030\001\031\001\032\001\033\001\034\001\
\035\001\036\001\037\001\038\001\039\001\040\001\041\001\255\255\
\255\255\044\001\045\001\255\255\255\255\048\001\049\001\001\001\
\002\001\255\255\004\001\005\001\006\001\007\001\008\001\255\255\
\010\001\255\255\012\001\255\255\255\255\015\001\016\001\255\255\
\255\255\019\001\255\255\255\255\255\255\023\001\024\001\025\001\
\026\001\027\001\028\001\029\001\030\001\031\001\032\001\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\041\001\
\255\255\255\255\255\255\045\001\001\001\002\001\048\001\049\001\
\255\255\006\001\007\001\008\001\009\001\010\001\255\255\255\255\
\255\255\255\255\015\001\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\023\001\255\255\255\255\026\001\027\001\028\001\
\029\001\030\001\031\001\032\001\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\041\001\255\255\255\255\255\255\
\045\001\255\255\047\001\048\001\001\001\002\001\255\255\255\255\
\255\255\006\001\007\001\008\001\009\001\010\001\255\255\255\255\
\255\255\255\255\015\001\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\023\001\255\255\255\255\026\001\027\001\028\001\
\029\001\030\001\031\001\032\001\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\041\001\255\255\255\255\255\255\
\045\001\001\001\002\001\048\001\255\255\255\255\006\001\007\001\
\008\001\009\001\010\001\255\255\255\255\255\255\255\255\015\001\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\023\001\
\255\255\255\255\026\001\027\001\028\001\029\001\030\001\031\001\
\032\001\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\041\001\255\255\255\255\255\255\045\001\001\001\002\001\
\048\001\255\255\255\255\006\001\007\001\008\001\009\001\010\001\
\255\255\255\255\255\255\255\255\015\001\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\023\001\255\255\255\255\026\001\
\027\001\028\001\029\001\030\001\031\001\032\001\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\041\001\255\255\
\255\255\255\255\045\001\001\001\002\001\048\001\004\001\255\255\
\006\001\007\001\008\001\009\001\255\255\255\255\255\255\255\255\
\255\255\015\001\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\023\001\255\255\255\255\026\001\027\001\028\001\029\001\
\030\001\031\001\032\001\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\041\001\255\255\255\255\255\255\045\001\
\001\001\002\001\048\001\004\001\255\255\006\001\007\001\008\001\
\009\001\255\255\255\255\255\255\255\255\255\255\015\001\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\023\001\255\255\
\255\255\026\001\027\001\028\001\029\001\030\001\031\001\032\001\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\041\001\255\255\255\255\255\255\045\001\001\001\002\001\048\001\
\255\255\255\255\006\001\007\001\008\001\009\001\255\255\255\255\
\255\255\255\255\255\255\015\001\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\023\001\255\255\255\255\026\001\027\001\
\028\001\029\001\030\001\031\001\032\001\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\041\001\255\255\255\255\
\255\255\045\001\001\001\002\001\048\001\255\255\255\255\006\001\
\007\001\008\001\009\001\255\255\255\255\255\255\255\255\255\255\
\015\001\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\023\001\255\255\255\255\026\001\027\001\028\001\029\001\030\001\
\031\001\032\001\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\041\001\255\255\255\255\255\255\045\001\001\001\
\002\001\048\001\255\255\255\255\006\001\007\001\008\001\009\001\
\071\000\072\000\073\000\074\000\075\000\076\000\077\000\078\000\
\079\000\080\000\081\000\255\255\255\255\255\255\255\255\255\255\
\026\001\027\001\028\001\029\001\030\001\031\001\032\001\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\041\001\
\255\255\255\255\255\255\045\001"

let yynames_const = "\
  DEF\000\
  ANDDEF\000\
  ADD1\000\
  SUB1\000\
  LPARENSPACE\000\
  LPARENNOSPACE\000\
  RPAREN\000\
  LBRACK\000\
  RBRACK\000\
  LBRACE\000\
  RBRACE\000\
  LET\000\
  IN\000\
  OF\000\
  EQUAL\000\
  COMMA\000\
  PLUS\000\
  MINUS\000\
  TIMES\000\
  IF\000\
  COLON\000\
  ELSECOLON\000\
  EOF\000\
  PRINT\000\
  PRINTSTACK\000\
  TRUE\000\
  FALSE\000\
  ISBOOL\000\
  ISNUM\000\
  ISTUPLE\000\
  EQEQ\000\
  LESSSPACE\000\
  LESSNOSPACE\000\
  GREATER\000\
  LESSEQ\000\
  GREATEREQ\000\
  AND\000\
  OR\000\
  NOT\000\
  THINARROW\000\
  COLONEQ\000\
  SEMI\000\
  NIL\000\
  TYPE\000\
  LAMBDA\000\
  BEGIN\000\
  END\000\
  REC\000\
  "

let yynames_block = "\
  NUM\000\
  ID\000\
  TYID\000\
  "

let yyact = [|
  (fun _ -> failwith "parser")
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : int) in
    Obj.repr(
# 25 "parser.mly"
        ( ENumber(_1, (Parsing.symbol_start_pos (), Parsing.symbol_end_pos ())) )
# 690 "parser.ml"
               : 'const))
; (fun __caml_parser_env ->
    Obj.repr(
# 26 "parser.mly"
         ( EBool(true, (Parsing.symbol_start_pos (), Parsing.symbol_end_pos ())) )
# 696 "parser.ml"
               : 'const))
; (fun __caml_parser_env ->
    Obj.repr(
# 27 "parser.mly"
          ( EBool(false, (Parsing.symbol_start_pos (), Parsing.symbol_end_pos ())) )
# 702 "parser.ml"
               : 'const))
; (fun __caml_parser_env ->
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'typ) in
    Obj.repr(
# 28 "parser.mly"
                  ( ENil(_3, (Parsing.symbol_start_pos (), Parsing.symbol_end_pos ())) )
# 709 "parser.ml"
               : 'const))
; (fun __caml_parser_env ->
    Obj.repr(
# 31 "parser.mly"
         ( Add1 )
# 715 "parser.ml"
               : 'prim1))
; (fun __caml_parser_env ->
    Obj.repr(
# 32 "parser.mly"
         ( Sub1 )
# 721 "parser.ml"
               : 'prim1))
; (fun __caml_parser_env ->
    Obj.repr(
# 33 "parser.mly"
        ( Not )
# 727 "parser.ml"
               : 'prim1))
; (fun __caml_parser_env ->
    Obj.repr(
# 34 "parser.mly"
          ( Print )
# 733 "parser.ml"
               : 'prim1))
; (fun __caml_parser_env ->
    Obj.repr(
# 35 "parser.mly"
           ( IsBool )
# 739 "parser.ml"
               : 'prim1))
; (fun __caml_parser_env ->
    Obj.repr(
# 36 "parser.mly"
          ( IsNum )
# 745 "parser.ml"
               : 'prim1))
; (fun __caml_parser_env ->
    Obj.repr(
# 37 "parser.mly"
            ( IsTuple )
# 751 "parser.ml"
               : 'prim1))
; (fun __caml_parser_env ->
    Obj.repr(
# 38 "parser.mly"
               ( PrintStack )
# 757 "parser.ml"
               : 'prim1))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'bind) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 41 "parser.mly"
                    ( [(_1, _3, (Parsing.rhs_start_pos 1, Parsing.rhs_end_pos 1))] )
# 765 "parser.ml"
               : 'bindings))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 4 : 'bind) in
    let _3 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _5 = (Parsing.peek_val __caml_parser_env 0 : 'bindings) in
    Obj.repr(
# 42 "parser.mly"
                                   ( (_1, _3, (Parsing.rhs_start_pos 1, Parsing.rhs_end_pos 1))::_5 )
# 774 "parser.ml"
               : 'bindings))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'namebind) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 45 "parser.mly"
                        ( [(_1, _3, (Parsing.rhs_start_pos 1, Parsing.rhs_end_pos 1))] )
# 782 "parser.ml"
               : 'namebindings))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 4 : 'namebind) in
    let _3 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _5 = (Parsing.peek_val __caml_parser_env 0 : 'namebindings) in
    Obj.repr(
# 46 "parser.mly"
                                           ( (_1, _3, (Parsing.rhs_start_pos 1, Parsing.rhs_end_pos 1))::_5 )
# 791 "parser.ml"
               : 'namebindings))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 2 : 'bindings) in
    let _4 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 49 "parser.mly"
                         ( ELet(_2, _4, (Parsing.symbol_start_pos (), Parsing.symbol_end_pos ())) )
# 799 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _3 = (Parsing.peek_val __caml_parser_env 2 : 'namebindings) in
    let _5 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 50 "parser.mly"
                                 ( ELetRec(_3, _5, (Parsing.symbol_start_pos (), Parsing.symbol_end_pos ())) )
# 807 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 4 : 'expr) in
    let _4 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _6 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 51 "parser.mly"
                                      ( EIf(_2, _4, _6, (Parsing.symbol_start_pos (), Parsing.symbol_end_pos ())) )
# 816 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 1 : 'expr) in
    Obj.repr(
# 52 "parser.mly"
                   ( _2 )
# 823 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'binop_expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 53 "parser.mly"
                         ( ESeq(_1, _3, (Parsing.symbol_start_pos (), Parsing.symbol_end_pos ())) )
# 831 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'binop_expr) in
    Obj.repr(
# 54 "parser.mly"
                          ( _1 )
# 838 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 57 "parser.mly"
         ( [_1] )
# 845 "parser.ml"
               : 'exprs))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'exprs) in
    Obj.repr(
# 58 "parser.mly"
                     ( _1::_3 )
# 853 "parser.ml"
               : 'exprs))
; (fun __caml_parser_env ->
    Obj.repr(
# 61 "parser.mly"
                         ( ETuple([], (Parsing.symbol_start_pos (), Parsing.symbol_end_pos ())) )
# 859 "parser.ml"
               : 'tuple_expr))
; (fun __caml_parser_env ->
    Obj.repr(
# 62 "parser.mly"
                       ( ETuple([], (Parsing.symbol_start_pos (), Parsing.symbol_end_pos ())) )
# 865 "parser.ml"
               : 'tuple_expr))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    Obj.repr(
# 63 "parser.mly"
                                    ( ETuple([_2], (Parsing.symbol_start_pos (), Parsing.symbol_end_pos ())) )
# 872 "parser.ml"
               : 'tuple_expr))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    Obj.repr(
# 64 "parser.mly"
                                  ( ETuple([_2], (Parsing.symbol_start_pos (), Parsing.symbol_end_pos ())) )
# 879 "parser.ml"
               : 'tuple_expr))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 3 : 'expr) in
    let _4 = (Parsing.peek_val __caml_parser_env 1 : 'exprs) in
    Obj.repr(
# 65 "parser.mly"
                                          ( ETuple(_2::_4, (Parsing.symbol_start_pos (), Parsing.symbol_end_pos ())) )
# 887 "parser.ml"
               : 'tuple_expr))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 3 : 'expr) in
    let _4 = (Parsing.peek_val __caml_parser_env 1 : 'exprs) in
    Obj.repr(
# 66 "parser.mly"
                                        ( ETuple(_2::_4, (Parsing.symbol_start_pos (), Parsing.symbol_end_pos ())) )
# 895 "parser.ml"
               : 'tuple_expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 5 : 'id) in
    let _3 = (Parsing.peek_val __caml_parser_env 3 : int) in
    let _5 = (Parsing.peek_val __caml_parser_env 1 : int) in
    Obj.repr(
# 69 "parser.mly"
                                ( EGetItem(_1, _3, _5, (Parsing.symbol_start_pos (), Parsing.symbol_end_pos ())) )
# 904 "parser.ml"
               : 'tuple_get))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 5 : 'tuple_get) in
    let _3 = (Parsing.peek_val __caml_parser_env 3 : int) in
    let _5 = (Parsing.peek_val __caml_parser_env 1 : int) in
    Obj.repr(
# 70 "parser.mly"
                                       ( EGetItem(_1, _3, _5, (Parsing.symbol_start_pos (), Parsing.symbol_end_pos ())) )
# 913 "parser.ml"
               : 'tuple_get))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 7 : 'id) in
    let _3 = (Parsing.peek_val __caml_parser_env 5 : int) in
    let _5 = (Parsing.peek_val __caml_parser_env 3 : int) in
    let _7 = (Parsing.peek_val __caml_parser_env 1 : 'expr) in
    Obj.repr(
# 73 "parser.mly"
                                             ( ESetItem(_1, _3, _5, _7, (Parsing.symbol_start_pos (), Parsing.symbol_end_pos ())) )
# 923 "parser.ml"
               : 'tuple_set))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 7 : 'tuple_get) in
    let _3 = (Parsing.peek_val __caml_parser_env 5 : int) in
    let _5 = (Parsing.peek_val __caml_parser_env 3 : int) in
    let _7 = (Parsing.peek_val __caml_parser_env 1 : 'expr) in
    Obj.repr(
# 74 "parser.mly"
                                                    ( ESetItem(_1, _3, _5, _7, (Parsing.symbol_start_pos (), Parsing.symbol_end_pos ())) )
# 933 "parser.ml"
               : 'tuple_set))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 7 : 'tuple_set) in
    let _3 = (Parsing.peek_val __caml_parser_env 5 : int) in
    let _5 = (Parsing.peek_val __caml_parser_env 3 : int) in
    let _7 = (Parsing.peek_val __caml_parser_env 1 : 'expr) in
    Obj.repr(
# 75 "parser.mly"
                                                    ( ESetItem(_1, _3, _5, _7, (Parsing.symbol_start_pos (), Parsing.symbol_end_pos ())) )
# 943 "parser.ml"
               : 'tuple_set))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 3 : 'prim1) in
    let _3 = (Parsing.peek_val __caml_parser_env 1 : 'expr) in
    Obj.repr(
# 80 "parser.mly"
                                    ( EPrim1(_1, _3, (Parsing.symbol_start_pos (), Parsing.symbol_end_pos ())) )
# 951 "parser.ml"
               : 'simple_expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'tuple_expr) in
    Obj.repr(
# 82 "parser.mly"
               ( _1 )
# 958 "parser.ml"
               : 'simple_expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'tuple_get) in
    Obj.repr(
# 83 "parser.mly"
              ( _1 )
# 965 "parser.ml"
               : 'simple_expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'tuple_set) in
    Obj.repr(
# 84 "parser.mly"
              ( _1 )
# 972 "parser.ml"
               : 'simple_expr))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 1 : 'expr) in
    Obj.repr(
# 86 "parser.mly"
                            ( _2 )
# 979 "parser.ml"
               : 'simple_expr))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 1 : 'expr) in
    Obj.repr(
# 87 "parser.mly"
                              ( _2 )
# 986 "parser.ml"
               : 'simple_expr))
; (fun __caml_parser_env ->
    let _4 = (Parsing.peek_val __caml_parser_env 4 : 'binds) in
    let _7 = (Parsing.peek_val __caml_parser_env 1 : 'expr) in
    Obj.repr(
# 89 "parser.mly"
                                                                      ( ELambda(_4, _7, (Parsing.symbol_start_pos (), Parsing.symbol_end_pos ())) )
# 994 "parser.ml"
               : 'simple_expr))
; (fun __caml_parser_env ->
    let _4 = (Parsing.peek_val __caml_parser_env 4 : 'binds) in
    let _7 = (Parsing.peek_val __caml_parser_env 1 : 'expr) in
    Obj.repr(
# 90 "parser.mly"
                                                                    ( ELambda(_4, _7, (Parsing.symbol_start_pos (), Parsing.symbol_end_pos ())) )
# 1002 "parser.ml"
               : 'simple_expr))
; (fun __caml_parser_env ->
    let _4 = (Parsing.peek_val __caml_parser_env 1 : 'expr) in
    Obj.repr(
# 91 "parser.mly"
                                           ( ELambda([], _4, (Parsing.symbol_start_pos (), Parsing.symbol_end_pos ())) )
# 1009 "parser.ml"
               : 'simple_expr))
; (fun __caml_parser_env ->
    let _4 = (Parsing.peek_val __caml_parser_env 4 : 'binds) in
    let _7 = (Parsing.peek_val __caml_parser_env 1 : 'expr) in
    Obj.repr(
# 92 "parser.mly"
                                                                    ( ELambda(_4, _7, (Parsing.symbol_start_pos (), Parsing.symbol_end_pos ())) )
# 1017 "parser.ml"
               : 'simple_expr))
; (fun __caml_parser_env ->
    let _4 = (Parsing.peek_val __caml_parser_env 4 : 'binds) in
    let _7 = (Parsing.peek_val __caml_parser_env 1 : 'expr) in
    Obj.repr(
# 93 "parser.mly"
                                                                  ( ELambda(_4, _7, (Parsing.symbol_start_pos (), Parsing.symbol_end_pos ())) )
# 1025 "parser.ml"
               : 'simple_expr))
; (fun __caml_parser_env ->
    let _4 = (Parsing.peek_val __caml_parser_env 1 : 'expr) in
    Obj.repr(
# 94 "parser.mly"
                                         ( ELambda([], _4, (Parsing.symbol_start_pos (), Parsing.symbol_end_pos ())) )
# 1032 "parser.ml"
               : 'simple_expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 3 : 'binop_expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 1 : 'exprs) in
    Obj.repr(
# 96 "parser.mly"
                                          ( EApp(_1, _3, (Parsing.symbol_start_pos (), Parsing.symbol_end_pos ())) )
# 1040 "parser.ml"
               : 'simple_expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'binop_expr) in
    Obj.repr(
# 97 "parser.mly"
                                    ( EApp(_1, [], (Parsing.symbol_start_pos (), Parsing.symbol_end_pos ())) )
# 1047 "parser.ml"
               : 'simple_expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'const) in
    Obj.repr(
# 99 "parser.mly"
          ( _1 )
# 1054 "parser.ml"
               : 'simple_expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'id) in
    Obj.repr(
# 100 "parser.mly"
       ( _1 )
# 1061 "parser.ml"
               : 'simple_expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : string) in
    Obj.repr(
# 103 "parser.mly"
                   ( EId(_1, (Parsing.symbol_start_pos (), Parsing.symbol_end_pos ())) )
# 1068 "parser.ml"
               : 'id))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 3 : string) in
    let _4 = (Parsing.peek_val __caml_parser_env 1 : 'typ) in
    Obj.repr(
# 104 "parser.mly"
                                      ( EAnnot(EId(_2, (Parsing.rhs_start_pos 2, Parsing.rhs_end_pos 2)), _4,
                                               (Parsing.symbol_start_pos (), Parsing.symbol_end_pos ())) )
# 1077 "parser.ml"
               : 'id))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 3 : string) in
    let _4 = (Parsing.peek_val __caml_parser_env 1 : 'typ) in
    Obj.repr(
# 106 "parser.mly"
                                    ( EAnnot(EId(_2, (Parsing.rhs_start_pos 2, Parsing.rhs_end_pos 2)), _4,
                                             (Parsing.symbol_start_pos (), Parsing.symbol_end_pos ())) )
# 1086 "parser.ml"
               : 'id))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'binop_expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'binop_expr) in
    Obj.repr(
# 111 "parser.mly"
                               ( EPrim2(Plus, _1, _3, (Parsing.symbol_start_pos (), Parsing.symbol_end_pos ())) )
# 1094 "parser.ml"
               : 'binop_expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'binop_expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'binop_expr) in
    Obj.repr(
# 112 "parser.mly"
                                ( EPrim2(Minus, _1, _3, (Parsing.symbol_start_pos (), Parsing.symbol_end_pos ())) )
# 1102 "parser.ml"
               : 'binop_expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'binop_expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'binop_expr) in
    Obj.repr(
# 113 "parser.mly"
                                ( EPrim2(Times, _1, _3, (Parsing.symbol_start_pos (), Parsing.symbol_end_pos ())) )
# 1110 "parser.ml"
               : 'binop_expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'binop_expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'binop_expr) in
    Obj.repr(
# 114 "parser.mly"
                              ( EPrim2(And, _1, _3, (Parsing.symbol_start_pos (), Parsing.symbol_end_pos ())) )
# 1118 "parser.ml"
               : 'binop_expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'binop_expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'binop_expr) in
    Obj.repr(
# 115 "parser.mly"
                             ( EPrim2(Or, _1, _3, (Parsing.symbol_start_pos (), Parsing.symbol_end_pos ())) )
# 1126 "parser.ml"
               : 'binop_expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'binop_expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'binop_expr) in
    Obj.repr(
# 116 "parser.mly"
                                  ( EPrim2(Greater, _1, _3, (Parsing.symbol_start_pos (), Parsing.symbol_end_pos ())) )
# 1134 "parser.ml"
               : 'binop_expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'binop_expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'binop_expr) in
    Obj.repr(
# 117 "parser.mly"
                                    ( EPrim2(GreaterEq, _1, _3, (Parsing.symbol_start_pos (), Parsing.symbol_end_pos ())) )
# 1142 "parser.ml"
               : 'binop_expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'binop_expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'binop_expr) in
    Obj.repr(
# 118 "parser.mly"
                                    ( EPrim2(Less, _1, _3, (Parsing.symbol_start_pos (), Parsing.symbol_end_pos ())) )
# 1150 "parser.ml"
               : 'binop_expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'binop_expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'binop_expr) in
    Obj.repr(
# 119 "parser.mly"
                                      ( EPrim2(Less, _1, _3, (Parsing.symbol_start_pos (), Parsing.symbol_end_pos ())) )
# 1158 "parser.ml"
               : 'binop_expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'binop_expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'binop_expr) in
    Obj.repr(
# 120 "parser.mly"
                                 ( EPrim2(LessEq, _1, _3, (Parsing.symbol_start_pos (), Parsing.symbol_end_pos ())) )
# 1166 "parser.ml"
               : 'binop_expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'binop_expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'binop_expr) in
    Obj.repr(
# 121 "parser.mly"
                               ( EPrim2(Eq, _1, _3, (Parsing.symbol_start_pos (), Parsing.symbol_end_pos ())) )
# 1174 "parser.ml"
               : 'binop_expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'simple_expr) in
    Obj.repr(
# 122 "parser.mly"
                ( _1 )
# 1181 "parser.ml"
               : 'binop_expr))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 4 : string) in
    let _6 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 126 "parser.mly"
    ( let arg_pos = Parsing.rhs_start_pos 3, Parsing.rhs_end_pos 4 in
      DFun(_2, [], SForall([], TyArr([], TyBlank arg_pos, arg_pos), arg_pos), _6, (Parsing.symbol_start_pos (), Parsing.symbol_end_pos ())) )
# 1190 "parser.ml"
               : 'decl))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 6 : string) in
    let _6 = (Parsing.peek_val __caml_parser_env 2 : 'typ) in
    let _8 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 129 "parser.mly"
    (
      let typ_pos = (Parsing.rhs_start_pos 6, Parsing.rhs_end_pos 6) in
      DFun(_2, [], SForall([], TyArr([], _6, typ_pos), typ_pos), _8, (Parsing.symbol_start_pos (), Parsing.symbol_end_pos ())) )
# 1201 "parser.ml"
               : 'decl))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 10 : string) in
    let _4 = (Parsing.peek_val __caml_parser_env 8 : 'tyids) in
    let _7 = (Parsing.peek_val __caml_parser_env 5 : 'binds) in
    let _10 = (Parsing.peek_val __caml_parser_env 2 : 'typ) in
    let _12 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 133 "parser.mly"
    (
      let arg_types = List.map bind_to_typ _7 in
      let arrow_pos = (Parsing.rhs_start_pos 6, Parsing.rhs_end_pos 10) in
      let typ_pos = (Parsing.rhs_start_pos 3, Parsing.rhs_end_pos 10) in
      DFun(_2, _7, SForall(_4, TyArr(arg_types, _10, arrow_pos), typ_pos), _12, (Parsing.symbol_start_pos (), Parsing.symbol_end_pos ()))
    )
# 1217 "parser.ml"
               : 'decl))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 5 : string) in
    let _4 = (Parsing.peek_val __caml_parser_env 3 : 'binds) in
    let _7 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 140 "parser.mly"
    (
      let arg_types = List.map bind_to_typ _4 in
      let typ_pos = (Parsing.rhs_start_pos 3, Parsing.rhs_end_pos 5) in
      let arr_typ = SForall([], TyArr(arg_types, TyBlank(typ_pos), typ_pos), typ_pos) in
      DFun(_2, _4, arr_typ, _7, (Parsing.symbol_start_pos (), Parsing.symbol_end_pos ()))
    )
# 1231 "parser.ml"
               : 'decl))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 7 : string) in
    let _4 = (Parsing.peek_val __caml_parser_env 5 : 'binds) in
    let _7 = (Parsing.peek_val __caml_parser_env 2 : 'typ) in
    let _9 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 147 "parser.mly"
    (
      let arg_types = List.map bind_to_typ _4 in
      let typ_pos = (Parsing.rhs_start_pos 3, Parsing.rhs_end_pos 7) in
      DFun(_2, _4, SForall([], TyArr(arg_types, _7, typ_pos), typ_pos), _9, (Parsing.symbol_start_pos (), Parsing.symbol_end_pos ()))
    )
# 1245 "parser.ml"
               : 'decl))
; (fun __caml_parser_env ->
    Obj.repr(
# 154 "parser.mly"
    ( [] )
# 1251 "parser.ml"
               : 'tyids))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : string) in
    Obj.repr(
# 155 "parser.mly"
         ( [_1] )
# 1258 "parser.ml"
               : 'tyids))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : string) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'tyids) in
    Obj.repr(
# 156 "parser.mly"
                     ( _1::_3 )
# 1266 "parser.ml"
               : 'tyids))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : string) in
    Obj.repr(
# 158 "parser.mly"
            ( TyVar(_1, (Parsing.symbol_start_pos (), Parsing.symbol_end_pos ())) )
# 1273 "parser.ml"
               : 'tyid))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'bind) in
    Obj.repr(
# 161 "parser.mly"
         ( [_1] )
# 1280 "parser.ml"
               : 'binds))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'bind) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'binds) in
    Obj.repr(
# 162 "parser.mly"
                     ( _1::_3 )
# 1288 "parser.ml"
               : 'binds))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'namebind) in
    Obj.repr(
# 165 "parser.mly"
             ( _1 )
# 1295 "parser.ml"
               : 'bind))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 1 : 'binds) in
    Obj.repr(
# 166 "parser.mly"
                               ( BTuple(_2, (Parsing.symbol_start_pos (), Parsing.symbol_end_pos ())) )
# 1302 "parser.ml"
               : 'bind))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 1 : 'binds) in
    Obj.repr(
# 167 "parser.mly"
                             ( BTuple(_2, (Parsing.symbol_start_pos (), Parsing.symbol_end_pos ())) )
# 1309 "parser.ml"
               : 'bind))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'namebind) in
    Obj.repr(
# 170 "parser.mly"
             ( [_1] )
# 1316 "parser.ml"
               : 'namebinds))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'namebind) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'namebinds) in
    Obj.repr(
# 171 "parser.mly"
                             ( _1:: _3 )
# 1324 "parser.ml"
               : 'namebinds))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : string) in
    Obj.repr(
# 174 "parser.mly"
                  ( make_namebind(_1, TyBlank(Parsing.symbol_start_pos (), Parsing.symbol_end_pos ()), (Parsing.symbol_start_pos (), Parsing.symbol_end_pos ())) )
# 1331 "parser.ml"
               : 'namebind))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : string) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'typ) in
    Obj.repr(
# 175 "parser.mly"
                 ( make_namebind(_1, _3, (Parsing.symbol_start_pos (), Parsing.symbol_end_pos ())) )
# 1339 "parser.ml"
               : 'namebind))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : string) in
    Obj.repr(
# 178 "parser.mly"
       ( TyCon(_1, (Parsing.symbol_start_pos (), Parsing.symbol_end_pos ())) )
# 1346 "parser.ml"
               : 'typ))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'tyid) in
    Obj.repr(
# 179 "parser.mly"
         ( _1 )
# 1353 "parser.ml"
               : 'typ))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'arrowtyp) in
    Obj.repr(
# 180 "parser.mly"
             ( _1 )
# 1360 "parser.ml"
               : 'typ))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'tupletyp) in
    Obj.repr(
# 181 "parser.mly"
             ( _1 )
# 1367 "parser.ml"
               : 'typ))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 3 : 'typs) in
    let _4 = (Parsing.peek_val __caml_parser_env 1 : 'typ) in
    Obj.repr(
# 184 "parser.mly"
                                            ( TyArr(_2, _4, (Parsing.symbol_start_pos (), Parsing.symbol_end_pos ())) )
# 1375 "parser.ml"
               : 'arrowtyp))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 3 : 'typs) in
    let _4 = (Parsing.peek_val __caml_parser_env 1 : 'typ) in
    Obj.repr(
# 185 "parser.mly"
                                          ( TyArr(_2, _4, (Parsing.symbol_start_pos (), Parsing.symbol_end_pos ())) )
# 1383 "parser.ml"
               : 'arrowtyp))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 1 : 'startyps) in
    Obj.repr(
# 188 "parser.mly"
                                  ( TyTup(_2, (Parsing.symbol_start_pos (), Parsing.symbol_end_pos ())) )
# 1390 "parser.ml"
               : 'tupletyp))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 1 : 'startyps) in
    Obj.repr(
# 189 "parser.mly"
                                ( TyTup(_2, (Parsing.symbol_start_pos (), Parsing.symbol_end_pos ())) )
# 1397 "parser.ml"
               : 'tupletyp))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'typ) in
    Obj.repr(
# 193 "parser.mly"
        ( [_1] )
# 1404 "parser.ml"
               : 'typs))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'typ) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'typs) in
    Obj.repr(
# 194 "parser.mly"
                   ( _1::_3 )
# 1412 "parser.ml"
               : 'typs))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'typ) in
    Obj.repr(
# 197 "parser.mly"
        ( [_1] )
# 1419 "parser.ml"
               : 'startyps))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'typ) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'startyps) in
    Obj.repr(
# 198 "parser.mly"
                       ( _1::_3 )
# 1427 "parser.ml"
               : 'startyps))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'decl) in
    Obj.repr(
# 201 "parser.mly"
         ( [_1] )
# 1434 "parser.ml"
               : 'declgroup))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'decl) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'declgroup) in
    Obj.repr(
# 202 "parser.mly"
                          ( _1::_3 )
# 1442 "parser.ml"
               : 'declgroup))
; (fun __caml_parser_env ->
    Obj.repr(
# 205 "parser.mly"
    ( [] )
# 1448 "parser.ml"
               : 'decls))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'declgroup) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'decls) in
    Obj.repr(
# 206 "parser.mly"
                    ( _1::_2 )
# 1456 "parser.ml"
               : 'decls))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 4 : string) in
    let _5 = (Parsing.peek_val __caml_parser_env 1 : 'startyps) in
    Obj.repr(
# 209 "parser.mly"
                                                ( TyDecl(_2, _5, (Parsing.symbol_start_pos (), Parsing.symbol_end_pos())) )
# 1464 "parser.ml"
               : 'tydecl))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 4 : string) in
    let _5 = (Parsing.peek_val __caml_parser_env 1 : 'startyps) in
    Obj.repr(
# 210 "parser.mly"
                                              ( TyDecl(_2, _5, (Parsing.symbol_start_pos (), Parsing.symbol_end_pos())) )
# 1472 "parser.ml"
               : 'tydecl))
; (fun __caml_parser_env ->
    Obj.repr(
# 213 "parser.mly"
    ( [] )
# 1478 "parser.ml"
               : 'tydecls))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'tydecl) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'tydecls) in
    Obj.repr(
# 214 "parser.mly"
                   ( _1 :: _2 )
# 1486 "parser.ml"
               : 'tydecls))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 5 : 'tydecls) in
    let _2 = (Parsing.peek_val __caml_parser_env 4 : 'decls) in
    let _3 = (Parsing.peek_val __caml_parser_env 3 : 'expr) in
    let _5 = (Parsing.peek_val __caml_parser_env 1 : 'typ) in
    Obj.repr(
# 217 "parser.mly"
                                     ( Program(_1, _2, EAnnot(_3, _5, (Parsing.rhs_start_pos 3, Parsing.rhs_end_pos 5)), (Parsing.symbol_start_pos (), Parsing.symbol_end_pos ())) )
# 1496 "parser.ml"
               : (Lexing.position * Lexing.position) Exprs.program))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 3 : 'tydecls) in
    let _2 = (Parsing.peek_val __caml_parser_env 2 : 'decls) in
    let _3 = (Parsing.peek_val __caml_parser_env 1 : 'expr) in
    Obj.repr(
# 218 "parser.mly"
                           ( Program(_1, _2, _3, (Parsing.symbol_start_pos (), Parsing.symbol_end_pos ())) )
# 1505 "parser.ml"
               : (Lexing.position * Lexing.position) Exprs.program))
(* Entry program *)
; (fun __caml_parser_env -> raise (Parsing.YYexit (Parsing.peek_val __caml_parser_env 0)))
|]
let yytables =
  { Parsing.actions=yyact;
    Parsing.transl_const=yytransl_const;
    Parsing.transl_block=yytransl_block;
    Parsing.lhs=yylhs;
    Parsing.len=yylen;
    Parsing.defred=yydefred;
    Parsing.dgoto=yydgoto;
    Parsing.sindex=yysindex;
    Parsing.rindex=yyrindex;
    Parsing.gindex=yygindex;
    Parsing.tablesize=yytablesize;
    Parsing.table=yytable;
    Parsing.check=yycheck;
    Parsing.error_function=parse_error;
    Parsing.names_const=yynames_const;
    Parsing.names_block=yynames_block }
let program (lexfun : Lexing.lexbuf -> token) (lexbuf : Lexing.lexbuf) =
   (Parsing.yyparse yytables 1 lexfun lexbuf : (Lexing.position * Lexing.position) Exprs.program)
;;
